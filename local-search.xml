<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo博客优化之文章置顶+置顶标签</title>
    <link href="/posts/4.html"/>
    <url>/posts/4.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/netcan/hexo-generator-index-pin-top">支持置顶的仓库</a></p><p>可以直接用以下命令安装</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ npm uninstall hexo-generator-<span class="hljs-built_in">index</span> --<span class="hljs-keyword">save</span><br>$ npm install hexo-generator-<span class="hljs-built_in">index</span>-pin-top --<span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><p>然后在需要置顶的文章的Front-matter中加上top: true即可。</p><span id="more"></span><p><strong>设置置顶标志</strong></p><p>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;post-meta&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>下面插入如下代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> post.top %&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">7D26CD</span>&gt;</span>置顶<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/25/hello-world/"/>
    <url>/2021/02/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装hugo教程</title>
    <link href="/posts/26.html"/>
    <url>/posts/26.html</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu安装hugo"><a href="#ubuntu安装hugo" class="headerlink" title="ubuntu安装hugo"></a>ubuntu安装hugo</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>官网 <a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><p>sudo apt-get install git</p><h3 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h3><p><a href="https://golang.org/dl/">https://golang.org/dl/</a>     （有可能被墙）</p><p>下载go1.15.8.linux-amd64.tar.gz</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> tar -C /usr/local -xzf go<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">8</span>.linux-amd<span class="hljs-number">64</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/go/bin</span><br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><h3 id="下载hugo"><a href="#下载hugo" class="headerlink" title="下载hugo"></a>下载hugo</h3><p><a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></p><p>下载 hugo_extended_0.80.0_Linux-64bit.deb</p><p>终端输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> dpkg -i hugo_extended_<span class="hljs-number">0</span>.<span class="hljs-number">80</span>.<span class="hljs-number">0</span>_Linux-<span class="hljs-number">64</span>bit.deb<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hugo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>创建blog</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hugo <span class="hljs-keyword">new</span> <span class="hljs-type">site</span> blog<br></code></pre></td></tr></table></figure><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>去官网下载主题 <a href="https://themes.gohugo.io/">https://themes.gohugo.io</a></p><p>我下载的是even <a href="https://themes.gohugo.io/hugo-theme-even">https://themes.gohugo.io/hugo-theme-even</a></p><p>再推荐一个主题 <a href="https://github.com/uPagge/uBlogger">https://github.com/uPagge/uBlogger</a></p><p>cd /blog</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/olOwOlo/</span>hugo-theme-even themes/even<br></code></pre></td></tr></table></figure><p>在exampleSite目录找到config.toml和content 复制到D:\blog目录下</p><p>在blog根目录下，终端输入下面代码   </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hugo <span class="hljs-params">--theme=even</span> <span class="hljs-params">--baseUrl=</span><span class="hljs-string">&quot;http://waimao365.github.io/&quot;</span> <span class="hljs-params">--buildDrafts</span><br></code></pre></td></tr></table></figure><p>#even改成你的主题</p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/blog</span><br>hugo<br>hugo server<br></code></pre></td></tr></table></figure><p> <a href="http://localhost:1313/">http://localhost:1313</a></p><h3 id="建立本地和github仓库的连接"><a href="#建立本地和github仓库的连接" class="headerlink" title="建立本地和github仓库的连接"></a>建立本地和github仓库的连接</h3><p>输入github的帐户名和邮箱</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;waimao365&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;88888@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p>查看设置的用户名和密码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>生成 SSH key 与 github 联系</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C “<span class="hljs-symbol">888888@</span>qq.com”<br></code></pre></td></tr></table></figure><p>一路回车  ubuntu设置显示隐藏文件，在用户目录找到.ssh </p><p>打开id_rsa.pub，复制里面的内容。 然后登录github，如果没有就注册一个账号，登录后右上角 头像 -&gt; Settings —&gt; SSH nd GPG keys —&gt; New SSH key。把公钥(id_rsa.pub)粘贴到 key 中，填好 title 并点击 Add SSH key</p><p>关联完之后可以在终端输入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p> cd到 /public<br>依次输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git init<br>git <span class="hljs-builtin-name">add</span> .<br>git commit -m “yyyy/mm/dd-hh:mm”<br>git remote <span class="hljs-builtin-name">add</span> origin git@github.com:waimao365/lubutu18.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><h3 id="自动部署脚本"><a href="#自动部署脚本" class="headerlink" title="自动部署脚本"></a>自动部署脚本</h3><p><a href="https://www.dazhuanlan.com/2019/10/14/5da3e834e0c1d/">https://www.dazhuanlan.com/2019/10/14/5da3e834e0c1d/</a></p><p><a href="https://github.com/coderzh/coderzh-hugo-blog/blob/master/deploy.py">https://github.com/coderzh/coderzh-hugo-blog/blob/master/deploy.py</a></p><h2 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h2><h3 id="fatal-远程-origin-已经存在"><a href="#fatal-远程-origin-已经存在" class="headerlink" title="fatal: 远程 origin 已经存在"></a>fatal: 远程 origin 已经存在</h3><p>此时只需要将远程配置删除，重新添加即可；</p><p>git remote rm origin</p><h3 id="rejected-master-gt-master-non-fast-forward"><a href="#rejected-master-gt-master-non-fast-forward" class="headerlink" title="! [rejected]        master -&gt; master (non-fast-forward)"></a>! [rejected]        master -&gt; master (non-fast-forward)</h3><p>本地生成ReadMe文件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull --rebase origin <span class="hljs-keyword">master</span> <span class="hljs-title"></span><br><span class="hljs-title">git</span> push origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>如果不行，可以强制上传覆盖远程文件（慎用）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -f <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="安装typora写文章"><a href="#安装typora写文章" class="headerlink" title="安装typora写文章"></a>安装typora写文章</h3><p><a href="https://www.typora.io/#linux">https://www.typora.io/#linux</a></p><h3 id="安装Visual-Studio-Code写文章"><a href="#安装Visual-Studio-Code写文章" class="headerlink" title="安装Visual Studio Code写文章"></a>安装Visual Studio Code写文章</h3><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>Visual Studio Code设置中文</p><p>打开进入软件，Ctrl + Shift + P，切入到命令行模式。输入“Configure Language”  </p><h3 id="安装-Notepad-编辑主题文件"><a href="#安装-Notepad-编辑主题文件" class="headerlink" title="安装 Notepad++ 编辑主题文件"></a>安装 Notepad++ 编辑主题文件</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:notepadqq-team/notepadqq<br>sudo apt-get update<br>sudo apt-get install notepadqq<br></code></pre></td></tr></table></figure><p>卸载方法:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo apt-get remove notepadqq<br>sudo<span class="hljs-built_in"> add-apt-repository </span>--removeppa:notepadqq-team/notepadqq<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hugo</category>
      
      <category>linux</category>
      
      <category>ubuntu</category>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>hugo</tag>
      
      <tag>linux</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode简单教程</title>
    <link href="/posts/28.html"/>
    <url>/posts/28.html</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="安装Visual-Studio-Code写文章及部署到github"><a href="#安装Visual-Studio-Code写文章及部署到github" class="headerlink" title="安装Visual Studio Code写文章及部署到github"></a>安装Visual Studio Code写文章及部署到github</h2><p>下载地址：   <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h3 id="修改成中文"><a href="#修改成中文" class="headerlink" title="修改成中文"></a>修改成中文</h3><p>1）打开vscode工具；</p><p>2）使用快捷键组合【Ctrl+Shift+p】，在搜索框中输入“configure display language”，点击确定后；</p><p>3）修改locale.json文件下的属性“locale”为“zh-CN”;</p><p>4）重启vscode工具；</p><p>打开文件夹 定位到 public目录，点击初始化，会在public生成一个.git的文件夹，点击全部提交</p><p>打开vscode，点击左下角master，</p><p>点击左边第三个按钮，再点三个小点</p><p>勾选源代码管理存储库,点代码库上的三个小点。</p><p>远程，添加远程储存库，从github添加远程储存库</p><p>等待几秒钟，选择你要部署的项目，命名一般用master或者mian</p><p>点击同步就就可以了。</p><p>非常简单吧！</p><p>大家一起测试吧！！！</p><p>谢谢!!!</p>]]></content>
    
    
    <categories>
      
      <category>hugo</category>
      
      <category>linux</category>
      
      <category>VScode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
      <tag>linux</tag>
      
      <tag>VScode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用ssh复制粘贴安装archlinux教程</title>
    <link href="/posts/27.html"/>
    <url>/posts/27.html</url>
    
    <content type="html"><![CDATA[<h2 id="官方安装教程"><a href="#官方安装教程" class="headerlink" title="官方安装教程"></a>官方安装教程</h2><p><a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><h2 id="手敲键盘部分"><a href="#手敲键盘部分" class="headerlink" title="手敲键盘部分"></a>手敲键盘部分</h2><p>开启SSH</p><p>首先设置root的密码 passwd </p><p>回车之后输入root的密码即可 </p><p>打开sshd </p><p>systemctl start sshd </p><p>查看ip地址</p><p> ip addr</p><p>4、安装工具<br>pacman -Syy<br>pacman -S net-tools openssh</p><p>5、启动 ssh</p><p>systemctl start sshd</p><p>dhcpcd  #网线<br>wifi-menu # wifi<br>ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p>ctrt+c  #退出ping </p><h2 id="复制粘帖部分"><a href="#复制粘帖部分" class="headerlink" title="复制粘帖部分"></a>复制粘帖部分</h2><p>用ssh软件登录</p><p>windows推荐Xshell        linux推荐putty</p><p>登录后就可以复制下面代码敲回车就可以了。</p><h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><p>查看磁盘信息  sda   </p><p>fdisk -l  # 查看磁盘信息  我查看的是sda 下面请把sda改成你的就可以了   </p><p>硬盘分区有两种方法，请选一种 cfdisk是图像化的  fdisk是纯命令的<br>#方法一：图像化的操作<br>cfdisk /dev/sda<br>分别用new新建三个分区 分别选择Type 选择类型<br>sda1   512M  EFI system<br>sda3    4G      linux swap      # 不要大于虚拟机实际内存<br>sda2   默认剩余全部 linux filesystem<br>分好后选择Write写入 选择<br>Quit退出  </p><p>#方法二：纯命令的操作</p><p>fdisk /dev/sda<br>输入m #显示菜单<br>输入p #显示硬盘情况<br>输入M 输入g   # 硬盘更改成GPT分区</p><p>输入n # 分区<br>先选择1 回车再回车再输入+512M<br>输入t 输入1  # 可以输入L查看格式<br>输入W<br>输入m<br>输入n输入n # 分区<br>先选择3 回车再回车再输入+4G<br>输入t 输入19<br>输入W<br>输入m<br>输入n输入n # 分区<br>先选择2 回车再回车再回车<br>#剩余目录会自动全部分配到这里<br>sda2无需更改格式 默认是就是linux filesystem<br>输入W<br>最后输入q退出分区<br>下面命令直接打复制粘贴就可以了  sda1，2，3 请改成你自己的 </p><p>#上面是两种硬盘分区教程，随便选一种吧，下面要格式化硬盘<br>fdisk -l  # 查看磁盘信息<br>下面的命令直接打复制粘贴就可以了  sda1，2，3 请改成你自己的 </p><h3 id="挂载并格式化"><a href="#挂载并格式化" class="headerlink" title="挂载并格式化"></a>挂载并格式化</h3><p>mkfs.fat -F32 /dev/sda1<br>mkfs.ext4 /dev/sda2<br>mkswap /dev/sda3<br>swapon /dev/sda3</p><p>挂载根分区到/mnt下    </p><p>mount /dev/sda2 /mnt </p><p>创建 boot 文件夹 来挂载EFI分区</p><p>mkdir /mnt/boot  </p><p>挂载EFI分区到 /mnt/boot 下 </p><p>mount /dev/sda1 /mnt/boot  </p><p>df 查看挂载情况</p><h3 id="编辑软件源"><a href="#编辑软件源" class="headerlink" title="编辑软件源"></a>编辑软件源</h3><p>nano /etc/pacman.d/mirrorlist  #fdisk -k 删除多余的源，fdisk -x 退出 y 回车<br>我选了下面三个，选一个也行<br>             <a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a><br>                         mirrors.tuna.tsinghua.edu.cn<br>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch">https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</a><br>Server = <a href="http://mirrors.163.com/archlinux/$repo/os/$arch">http://mirrors.163.com/archlinux/$repo/os/$arch</a><br>Server = <a href="http://mirrors.aliyun.com/archlinux/$repo/os/$arch">http://mirrors.aliyun.com/archlinux/$repo/os/$arch</a></p><p>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$repo/os/$arch">https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$repo/os/$arch</a><br>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch">https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</a><br>Server = <a href="http://mirrors.163.com/archlinux/$repo/os/$arch">http://mirrors.163.com/archlinux/$repo/os/$arch</a><br>Server = <a href="http://mirrors.163.com/archlinux-cn/$repo/os/$arch">http://mirrors.163.com/archlinux-cn/$repo/os/$arch</a></p><p>更新系统<br>pacman -Syy</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>安装必须的软件包 （不建议）</p><p>pacstrap /mnt base linux linux-firmware</p><p>安装加强版的软件包 （建议）</p><p>pacstrap /mnt base linux linux-firmware base-devel networkmanager intel-ucode vim git openssh net-tools</p><p>用以下命令生成 fstab 文件 (用 -U 或 -L 选项设置UUID 或卷标)：</p><p>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</p><p>cat /mnt/etc/fstab<br>检查<br>vim /mnt/etc/fstab</p><h3 id="Change-root-到新安装的系统"><a href="#Change-root-到新安装的系统" class="headerlink" title="Change root 到新安装的系统"></a>Change root 到新安装的系统</h3><p>arch-chroot /mnt</p><p>#设置时区：<br> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </p><p>#同步时区<br> hwclock –systohc </p><p>安装vim<br>pacman -S vim</p><p>本地化：</p><p>设置系统语言 </p><p>vim /etc/locale.gen<br>nano /etc/locale.gen </p><p>把 en_US.UTF-8 UTF-8和zh_CN.UTF-8 UTF-8注释都去掉之后 按esc退出编辑模式，然后 :wq 保存退出</p><p>生成一下语言</p><p> locale-gen</p><p>最后设置缺省的语言，这里推荐使用英文，不然到时候进入命令模式的时候会出现中文乱码 </p><p>echo LANG=en_US.UTF-8 &gt;&gt; /etc/locale.conf<br>echo LANG=zh_CN.UTF-8 &gt;&gt; /etc/locale.conf<br>sudo vim /etc/locale.conf</p><p>这里使用一个箭头或者两个箭头都可以</p><p>设置 主机名</p><p>echo archlinux &gt;&gt; /etc/hostname</p><p>#网络配置<br>vim /etc/hosts  #输入下面内容</p><p>127.0.0.1 localhost<br>::1 localhost<br>127.0.1.1 archlinux.localdomain archlinux</p><p>127.0.0.1    localhost    localhost<br>::1          localhost   localhost<br>127.0.1.1    archlinux.localdomain    archlinux</p><p>保存并退出</p><p>安装网络管理（如果不安装这个服务的话，每次开机都得重新设置网络）<br>pacman -S networkmanager<br>pacman -S net-tools openssh<br>开机启动<br>systemctl enable NetworkManager sshd</p><p>设置root密码<br>passwd</p><p>安装一个其他用户<br>useradd -m -g wheel chenan </p><p>passwd chenan</p><p>pacman -S sudo</p><p>visudo   # 去掉%wheel=（ALL）ALL 前面的#号</p><h3 id="安装grub"><a href="#安装grub" class="headerlink" title="安装grub"></a>安装grub</h3><p>重新生成ramdisk环境<br>mkinitcpio -p linux</p><p>pacman -S grub efibootmgr<br>grub-install –target=x86_64-efi –efi-directory=/boot –bootloader-id=GRUB<br>grub-mkconfig -o /boot/grub/grub.cfg</p><p>exit 或按 Ctrl+d 退出 chroot 环境。</p><p>可选用 umount -R /mnt 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 fuser(1) 查找原因。</p><p>最后，通过执行 reboot 重启系统</p><h2 id="再用ssh软件登录，安装桌面和服务"><a href="#再用ssh软件登录，安装桌面和服务" class="headerlink" title="再用ssh软件登录，安装桌面和服务"></a>再用ssh软件登录，安装桌面和服务</h2><h3 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h3><p>sudo vim /etc/pacman.conf<br>把multilib和它下面一行的 # 去掉，具体是把光标移到 # 那，按 x ，然后在文件里添加 archlinuxcn 源，按 i 输入<br>[archlinuxcn]<br>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch">https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</a></p><p>sudo pacman -Syu</p><p>sudo pacman -S archlinuxcn-keyring</p><p>sudo pacman -Syyu   #更新到最新系统</p><h3 id="安装x-服务"><a href="#安装x-服务" class="headerlink" title="安装x 服务"></a>安装x 服务</h3><p>sudo pacman -S xorg</p><h3 id="安装桌面环境"><a href="#安装桌面环境" class="headerlink" title="安装桌面环境"></a>安装桌面环境</h3><p>sudo pacman -S xfce4 xfce4-goodies</p><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>sudo pacman -S ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji</p><h3 id="安装ligthdm"><a href="#安装ligthdm" class="headerlink" title="安装ligthdm"></a>安装ligthdm</h3><p>pacman -S lightdm lightdm-gtk-greeter</p><p>sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings<br>systemctl enable lightdm</p><p>systemctl enable lightdm.service</p><p>从图形界面进入到命令行界面</p><p>systemctl disable lightdm.service<br>从命令行进入到图形界面</p><p>systemctl enable lightdm.service<br>然后</p><p>systemctl start lightdm.service</p><h3 id="测试开启桌面"><a href="#测试开启桌面" class="headerlink" title="测试开启桌面"></a>测试开启桌面</h3><p>sudo systemctl start lightdm.service</p><h3 id="自动开启桌面"><a href="#自动开启桌面" class="headerlink" title="自动开启桌面"></a>自动开启桌面</h3><p>systemctl enable lightdm.service</p><h3 id="安装声卡驱动"><a href="#安装声卡驱动" class="headerlink" title="安装声卡驱动"></a>安装声卡驱动</h3><p>sudo pacman -S alsa-utils pulseaudio-alsa</p><h3 id="虚拟机显卡驱动"><a href="#虚拟机显卡驱动" class="headerlink" title="虚拟机显卡驱动"></a>虚拟机显卡驱动</h3><p>pcaman -S xf86-video-vesa</p><h3 id="安装软件商店"><a href="#安装软件商店" class="headerlink" title="安装软件商店"></a>安装软件商店</h3><p>sudo pacman -S pamac</p><h3 id="安装yay"><a href="#安装yay" class="headerlink" title="安装yay"></a>安装yay</h3><p>sudo pacman -S yay<br>sudo pacman -S pcaman</p><h3 id="英文改中文"><a href="#英文改中文" class="headerlink" title="英文改中文"></a>英文改中文</h3><p>sudo vim /etc/locale.conf<br>LANG=en_US.UTF-8  改成 LANG=zh_CN.UTF-8</p><h3 id="按照官网教程安装VMware-Tools"><a href="#按照官网教程安装VMware-Tools" class="headerlink" title="按照官网教程安装VMware Tools"></a>按照官网教程安装VMware Tools</h3><p><a href="https://wiki.archlinux.org/index.php/VMware/Install_Arch_Linux_as_a_guest">https://wiki.archlinux.org/index.php/VMware/Install_Arch_Linux_as_a_guest</a></p><p>sudo pacman -S xf86-input-vmmouse xf86-video-vmware mesa</p><p>sudo pacman -S open-vm-tools gtkmm3</p><p>sudo systemctl start vmtoolsd.service</p><p>sudo systemctl enable vmtoolsd.service</p><p>sudo systemctl start vmware-vmblock-fuse.service</p><p>sudo systemctl enable vmware-vmblock-fuse.service</p><p>sudo pacman -S gtkmm gtk2</p><p>sudo vim /etc/mkinitcpio.conf<br>MODULES=(）前面加# 下一行加上下面的代码<br>MODULES=(vsock vmw_vsock_vmci_transport vmw_balloon vmw_vmci vmwgfx)</p><h3 id="Xorg设置"><a href="#Xorg设置" class="headerlink" title="Xorg设置"></a>Xorg设置</h3><p>pacman -S xf86-input-vmmouse xf86-video-vmware mesa<br>yay -S xf86-input-vmmouse xf86-video-vmware mesa</p><p>vim /etc/X11/Xwrapper.config</p><p>needs_root_rights=yes</p><h3 id="安装小企鹅"><a href="#安装小企鹅" class="headerlink" title="安装小企鹅"></a>安装小企鹅</h3><p>sudo pacman -S fcitx fcitx-im fcitx-configtool</p><p>sudo pacman -S fcitx fcitx-im</p><h3 id="配置小企鹅输入法"><a href="#配置小企鹅输入法" class="headerlink" title="配置小企鹅输入法"></a>配置小企鹅输入法</h3><p>sudo vim ~/.xprofile</p><p>在文件中加入如下几行配置：</p><p>#fcitx<br>export LC_ALL=zh_CN.UTF-8<br>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”</p><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><p>sudo pacman -S yay<br>yay -S fcitx-sogoupinyin<br>yay -S fcitx-qt4</p><p>从AUR下载安装包并安装<br>打开<a href="https://aur.archlinux.org/">https://aur.archlinux.org/</a><br><a href="https://aur.archlinux.org/packages/deepin.com.qq.im.light/">https://aur.archlinux.org/packages/deepin.com.qq.im.light/</a><br>解压<br>tar -zxvf deepin.com.qq.im.light.tar.gz<br>在解压后的目录输入<br>makepkg -s<br>编译完成后会生成一个.pkg.tar.xz的文件,再用pacman -U执行本地安装<br>pacman -U deepin.com.qq.im.light-7.9.14308deepin8-4-x86_64.pkg.tar.zst</p><p>tar -zxvf  deepin-wine-wechat.tar.gz</p><p>pacman -U deepin.com.qq.im.light.tar.gz</p><h3 id="谷歌输入法"><a href="#谷歌输入法" class="headerlink" title="谷歌输入法"></a>谷歌输入法</h3><p>sudo pacman -S fcitx-googlepinyin</p><h3 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h3><p>wps</p><p><a href="https://linux.wps.cn/">https://linux.wps.cn/</a><br>yay -S wps-office<br>安装中文<br>yay -S wps-office-mui-zh-cn</p><p>可以到软件商店设置里面开启AUR<br>找到wps-office-mui-zh-cn 点击构建  耐心等待几分钟，安装后 新建一个文档<br>右上角有个A字，点击，就可以选择中文，重启WPS 就是中文的了</p><p>yaourt -S deepin.com.qq.im</p><p>yaourt -S deepin-wine deepin-wine32</p><p>wps 依赖字体</p><p>sudo pacman -S ttf-wps-fonts</p><p>google-chrome<br>sudo pacman -S google-chrome</p><p>Markdown编辑器<br>sudo pacman -S typora</p><p>网易云音乐<br>sudo pacman -S netease-cloud-music<br>yaourt -S netease-cloud-music</p><p><a href="https://www.bilibili.com/video/BV14J411i72o?from=search&amp;seid=10908065740456618903">https://www.bilibili.com/video/BV14J411i72o?from=search&amp;seid=10908065740456618903</a><br><a href="https://github.com/xylzq/arch">https://github.com/xylzq/arch</a></p><h3 id="关于arch的一些实用软件"><a href="#关于arch的一些实用软件" class="headerlink" title="关于arch的一些实用软件"></a>关于arch的一些实用软件</h3><p>1.录屏软件</p><p>sudo pacman -S simplescreenrecorder<br>2.显示按键软件</p><p>sudo pacman -S screenkey<br>3.剪辑视频软件</p><p>sudo pacman -S kdenlive<br>汉化<br>sudo mv kdenlive.mo /usr/share/locale/zh_CN/LC_MESSAGES/</p><p>pan.baidu.com/s/1dFF8kp<br>4.修图软件</p><p>sudo pacman -S gimp</p><p>安装坚果云<br>sudo pacman -S nutstore</p><p>安装微信<br>sudo pacman -S electronic-wechat</p><p>安装<br>sudo pacman -S yaourt</p><p>网盘同步Rclone<br>sudo pacman -S rclone</p><p>gitkraken -Git管理工具</p><p>sudo pacman -S gitkraken<br>Vscode:visual-studio-code-bin<br>yay -S visual-studio-code-bin</p><p>Virtualbox<br>sudo pacman -S virtualbox </p><p>aur qq<br><a href="https://aur.archlinux.org/packages/deepin.com.qq.im.light/">https://aur.archlinux.org/packages/deepin.com.qq.im.light/</a></p><p><a href="https://github.com/orangbus/tool">https://github.com/orangbus/tool</a></p><p>画图软件 KRITA</p><p>安装AppImage软件<br>添加可执行权限<br>chmod a+x <em>.AppImage<br>执行它！<br>./</em>.AppImage</p><p>chmod a+x Qv2ray.v2.7.0-pre1.linux-x64.AppImage<br>./Qv2ray.v2.7.0-pre1.linux-x64.AppImage</p><h3 id="一个将deb包转换成pkg包的软件"><a href="#一个将deb包转换成pkg包的软件" class="headerlink" title="一个将deb包转换成pkg包的软件"></a>一个将deb包转换成pkg包的软件</h3><p>debtap配置安装<br>sudo pacman -S pkgfile<br>git clone <a href="https://github.com/helixarch/debtap">https://github.com/helixarch/debtap</a><br>cd debtap<br> sudo cp debtap /usr/local/bin<br> sudo debtap -u  </p><p>sudo vim /usr/bin/debtap</p><p>使用方法<br>   sudo debtap xxxx.deb</p><p>安装时会提示输入包名，以及license。包名随意，license就填GPL</p><p>安装转换好的本地包<br>   sudo pacman -U xxx.tar.xz</p><p>sudo debtap wps-office_11.1.0.9719_amd64.deb</p><p>sudo pacman -U wps-office-11.1.0.9719-1-x86_64.pkg.tar.zst</p><p>sudo debtap Tenvideo_universal_1.0.10_amd64.deb</p><p>sudo pacman -U tenvideo-universal-1.0.10-1-x86_64.pkg.tar.zst</p><h3 id="安装安卓模拟器xDroid"><a href="#安装安卓模拟器xDroid" class="headerlink" title="安装安卓模拟器xDroid"></a>安装安卓模拟器xDroid</h3><p><a href="https://www.linzhuotech.com/">https://www.linzhuotech.com/</a></p><p>系统更新<br>sudo pacman -Syu </p>]]></content>
    
    
    <categories>
      
      <category>archlinux</category>
      
      <category>linux</category>
      
      <category>电脑系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>电脑系统</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n1终极玩法Armbian-5.77安装docker宝塔openwrt和HomeAssistant</title>
    <link href="/posts/23.html"/>
    <url>/posts/23.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装Armbian-5-77"><a href="#安装Armbian-5-77" class="headerlink" title="安装Armbian-5.77"></a>安装Armbian-5.77</h1><p><a href="https://www.right.com.cn/forum/thread-510423-1-1.html">https://www.right.com.cn/forum/thread-510423-1-1.html</a>  </p><h2 id="下载Armbian-5-77写入U盘"><a href="#下载Armbian-5-77写入U盘" class="headerlink" title="下载Armbian-5.77写入U盘"></a>下载Armbian-5.77写入U盘</h2><h2 id="替换低负载的dtb"><a href="#替换低负载的dtb" class="headerlink" title="替换低负载的dtb"></a>替换低负载的dtb</h2><p>meson-gxl-s905d-phicomm-n1-xiangsm.dtb  </p><h2 id="开启bbr"><a href="#开启bbr" class="headerlink" title="开启bbr"></a>开启bbr</h2><p>在/etc/sysctl.conf末尾添加下面两行:<br>net.core.default_qdisc=fq<br>net.ipv4.tcp_congestion_control=bbr<br>然后执行<br>sudo sysctl -p  </p><h2 id="写入emmc"><a href="#写入emmc" class="headerlink" title="写入emmc"></a>写入emmc</h2><p>./install.sh  </p><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><p>如果有外国IP就不用更换源了<br>sudo nano /etc/apt/sources.list</p><p>修改源为国内源<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cndebian/">http://mirrors.tuna.tsinghua.edu.cndebian</a> stretch main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian">http://mirrors.tuna.tsinghua.edu.cn/debian</a> stretch-updates main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian-security">http://mirrors.tuna.tsinghua.edu.cn/debian-security</a> stretch/updates main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian">http://mirrors.tuna.tsinghua.edu.cn/debian</a> stretch-backports main  </p><p>保存后，更新源<br>执行 apt-get update 命令即可更新源<br>执行 apt-get upgrade 更新软件  </p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>输入 armbian-config<br>选择Software，回车确认 接着选择Softy，回车确认 最后选择docker，空格勾选，回车确认开始安装<br>然后，按tab键，选择OK，回车确认 最后等docker程序自动安装完成  </p><h2 id="docker安装portainer"><a href="#docker安装portainer" class="headerlink" title="docker安装portainer"></a>docker安装portainer</h2><p>docker pull portainer/portainer<br>docker run -d -p 9888:9000 -v /var/run/docker.sock:/var/run/docker.sock –restart=always –name prtainer portainer/portainer<br>如果遇到安装失败一般都是源的问题，换IP可以解决  </p><h2 id="挂载docker数据到数据盘"><a href="#挂载docker数据到数据盘" class="headerlink" title="挂载docker数据到数据盘"></a>挂载docker数据到数据盘</h2><p>考虑到N1只有6G可用储存，我们可以将dockers安装到数据盘，接入U盘或者硬盘，输入<br>df -i，比如查询硬盘为  /dev/sda1<br>将硬盘挂载到mnt （其他目录也可以）<br>输入mount /dev/sda1 /mnt<br>输入 blkid /dev/sda1 查询 得到数据<br>UUID=”a78e3c99-2754-034e-abd1-36后面省略<br>输入命令开机自动挂载<br>echo ‘UUID=a78e3c99-2754-034e-abd1-36后面省略 /mnt ext4 defaults 0 0’ &gt;&gt; /etc/fstab<br>输入 mount -a<br>检查是否挂载好  df -h<br>备份docker数据<br>cp -r /var/lib/docker_data /var/lib/docker<br>移动docker数据到硬盘<br>mv /var/lib/docker /mnt/docker<br>把硬盘的目录发送到N1<br>ln -s /mnt/docker /var/lib/docker</p><h2 id="docker安装openwrt"><a href="#docker安装openwrt" class="headerlink" title="docker安装openwrt"></a>docker安装openwrt</h2><p>docker pull unifreq/openwrt-aarch64:r20.04.08<br>ip link set eth0 promisc on<br>modprobe pppoe<br>docker network create -d macvlan –subnet=192.168.123.0/24 –gateway=192.168.123.1 -o parent=eth0 macnet<br>docker run –restart always -d –network macnet –privileged –ip=192.168.123.2 unifreq/openwrt-aarch64:r20.04.08 /sbin/init<br>大家根据自己的实际IP改下代码<br>再登录portainer管理页面，点container<br>vi /etc/config/network<br>按i改网关信息，op的ip要改成跟主路由同网关，比如192.168.123.2或者192.168.123.3，改好后依次按返回键，:wq保存退出。再点disconnect，在containers那勾选op 点restart重启op。 (部分op需手动复制粘贴以下两条<br>192.168.2.1改成你主路由ip。不复制进去就登陆不了op<br>option gateway ‘192.168.123.1’<br>option dns ‘114.114.114.114 223.5.5.5’<br>另外再教大家安装下载好的openwrt<br>导入本地编译好的rootfs.tar.gz并部署<br>随便导入一个文件夹  cd /到这个文件夹<br>docker import openwrt-armvirt-64-default-rootfs.tar.gz openwrt:R9.9.15<br>再输入<br>docker run –restart always -d –network macnet –privileged –ip=192.168.123.5 openwrt:R9.9.15 /sbin/init<br>vi /etc/config/network<br>设置网关为192.168.123.5<br>重启openwrt 输入192.168.123.5 就可以登陆了<br>默认的账号root 密码password  </p><h1 id="安装Home-Assistant"><a href="#安装Home-Assistant" class="headerlink" title="安装Home Assistant"></a>安装Home Assistant</h1><p>docker run -d –restart=always –name=”home-assistant” -e TZ=Asia/Shanghai -v /var/lib/docker/homeassistant:/config -p 8123:8123 -v /etc/localtime:/etc/localtime:ro –net=host homeassistant/aarch64-homeassistant:0.88.1</p><p>  具体参考另一篇文章<br>  <a href="https://163168.xyz/posts/6.html">https://163168.xyz/posts/6.html</a></p><h1 id="安装宝塔搭建网站"><a href="#安装宝塔搭建网站" class="headerlink" title="安装宝塔搭建网站"></a>安装宝塔搭建网站</h1><p>安装过程直接看这里<br><a href="https://hub.docker.com/r/startwish/n1-bt-lnmp">https://hub.docker.com/r/startwish/n1-bt-lnmp</a></p><p>默认的信息<br>宝塔面板登录页面是</p><p>你的IP:8888/startwish<br>账号startwish</p><p>密码startwish</p><p>系统root账户的密码是startwish<br>可以通过宝塔搭建自己的网站了！！！</p>]]></content>
    
    
    <categories>
      
      <category>N1</category>
      
      <category>docker</category>
      
      <category>宝塔</category>
      
      <category>openwrt</category>
      
      <category>Home Assistant</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>N1</tag>
      
      <tag>宝塔</tag>
      
      <tag>openwrt</tag>
      
      <tag>Home Assistant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hugo搭建和使用教程</title>
    <link href="/posts/22.html"/>
    <url>/posts/22.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  做博客就图个稳定，一次性买了10年的域名，搭配免费的github，适合做长期博客。<br>  之前安装的hexo，可玩性非常强，前面文章有写一些关于hexo的安装使用教程，用了一年多，也发现了一些问题，hexo版本更新各种不兼容，访问速度慢，，很影响心情，自己都懒得搭理博客了，国内cdn加速需要备案，只是做个小站，不想太麻烦。<br>  所幸，无意中发现荒野无灯大神把站转移到hugo，访问速度非常快，于是自己马上搭建了一个，打开文章页面基本上是秒开，之前hexo打开文章大约要5-6秒，用不同设备，不同网络测试很多次，hugo博客的访问速度要快4倍以上。并且文章越多，hugo的优势就越明显，为避免以后迁移麻烦，所以赶紧把博客迁到了hugo。主题也是我喜欢的，非常简洁。<br>  下面开始教程吧！！！</p><h1 id="安装hugo"><a href="#安装hugo" class="headerlink" title="安装hugo"></a>安装hugo</h1><p>下载hugo <a href="https://gohugo.io/">https://gohugo.io</a><br>解压到任意目录，比如D:\hugo\bin<br>将Hugo添加到Windows的环境变量 PATH中<br>系统变量和用户变量都添加D:\hugo\bin<br>下载Git <a href="https://git-scm.com/">https://git-scm.com</a>  并安装<br>下载Go语言开发环境 <a href="https://golang.org/dl">https://golang.org/dl</a>  并安装<br>打开Git Bash 输入 hugo version 出现hugo static site generator相关信息表示安装完成<br>打开D盘 右键点击 git bash here<br>输入hugo new site blog</p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>去官网下载主题  <a href="https://themes.gohugo.io/">https://themes.gohugo.io</a><br>我下载的是even  <a href="https://themes.gohugo.io/hugo-theme-even">https://themes.gohugo.io/hugo-theme-even</a><br>cd /blog<br>git clone <a href="https://github.com/olOwOlo/hugo-theme-even">https://github.com/olOwOlo/hugo-theme-even</a> themes/even<br>安装好后 打开D:\blog\themes\even\exampleSite<br>找到config.toml和content 复制到D:\blog目录下<br>输入<br>hugo –theme=even –baseUrl=”ch0769.github.io” –buildDrafts<br> #even改成你的主题 ch0769.github.io也改成你的网址<br> 出现 public 文件夹  cd /public<br> 依次输入<br> git init<br> git add .<br> git commit -m “yyyy/mm/dd-hh:mm”<br> git remote add origin <a href="https://github.com/ch0769/ch0769.github.io.git">https://github.com/ch0769/ch0769.github.io.git</a><br> git push -u origin master</p><p>cd /blog<br>hugo<br>hugo server<br>可以本地预览了 <a href="http://localhost:1313/">http://localhost:1313</a></p><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><p>hugo new post\hugo搭建和使用教程.md<br>会在D:\blog\content\post  hugo搭建和使用教程.md<br>可以下载Visual Studio Code编辑和修改文章，记得换行前要先打两个空格，再按回车键。 </p><h1 id="hugo使用教程"><a href="#hugo使用教程" class="headerlink" title="hugo使用教程"></a>hugo使用教程</h1><h2 id="添加固定链接"><a href="#添加固定链接" class="headerlink" title="添加固定链接"></a>添加固定链接</h2><p>这篇教程的加法参考如下<br>title: hugo搭建和使用教程<br>date: 2020-06-01 15:55:32<br>url: /hugodajian.html<br>（hugodajian 可以改成数字或者任意字母）</p><h2 id="写文章后部署"><a href="#写文章后部署" class="headerlink" title="写文章后部署"></a>写文章后部署</h2><p>在blog目录输入hugo<br>在blog/public目录依次输入<br>git add .<br>git commit -m “yyyy/mm/dd-hh:mm”<br>git push -u origin master  </p><h2 id="Netlify-自动编译部署生成-Web-网站"><a href="#Netlify-自动编译部署生成-Web-网站" class="headerlink" title="Netlify 自动编译部署生成 Web 网站"></a>Netlify 自动编译部署生成 Web 网站</h2><p>官方首页：<a href="https://www.netlify.com/">https://www.netlify.com</a>  </p><h2 id="快速在Netlify建立Jekyll、Hexo、Hugo静态博客"><a href="#快速在Netlify建立Jekyll、Hexo、Hugo静态博客" class="headerlink" title="快速在Netlify建立Jekyll、Hexo、Hugo静态博客"></a>快速在Netlify建立Jekyll、Hexo、Hugo静态博客</h2><p>网站首页：<a href="https://www.staticgen.com/">https://www.staticgen.com/</a><br>教程可以看这里 <a href="https://kuleyu.github.io/hexolog/post/31808.html">https://kuleyu.github.io/hexolog/post/31808.html</a>   </p><h2 id="写文章日期格式"><a href="#写文章日期格式" class="headerlink" title="写文章日期格式"></a>写文章日期格式</h2><p>date: 2020-06-01 15:55:32  </p><h2 id="从hexo导入文章到hugo的固定链接设置"><a href="#从hexo导入文章到hugo的固定链接设置" class="headerlink" title="从hexo导入文章到hugo的固定链接设置"></a>从hexo导入文章到hugo的固定链接设置</h2><p>hexo设置 permalink: posts/:abbrlink.html<br>文章页面设置 abbrlink: 1   （每篇文章加一个数）<br>hugo固定链接设置<br>文章里面的<br>abbrlink: 1<br>改成<br>url: /posts/1.html<br>域名从hexo解析到hugo后，固定链接是不变的<br>也可以不用阿拉伯数字，随便输入其他字母也是可以的，这个看个人喜欢了。  </p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>绑域名非常简单，大家可以翻我前面的教程。<br>这里发现一个问题<br>绑定域名后<br>输入  git push -u origin master  出现错误如下<br>git上传文件出错[rejected] master -&gt; master (fetch first) error: failed to push some refs to<br>这个是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并<br>git pull –rebase origin master<br>再输入<br>git push origin master<br>就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>hugo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vdoing主题效果图</title>
    <link href="/pages/d557b9a89a215d2e"/>
    <url>/pages/d557b9a89a215d2e</url>
    
    <content type="html"><![CDATA[<h1 id="vdoing主题效果图"><a href="#vdoing主题效果图" class="headerlink" title="vdoing主题效果图"></a>vdoing主题效果图</h1><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><br/><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408125410.png" style="width:48%;"/><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120138.png"  style="width:48%;" /><p align="center">首页 & 目录页△</p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120144.png"  style="width:48%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120145.png"  style="width:48%;" /><p align="center">文章详情页 & 时间轴页△</p><h2 id="首页个性化大图"><a href="#首页个性化大图" class="headerlink" title="首页个性化大图"></a>首页个性化大图</h2><br/><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408125412.png" /><p align="center">首页个性化大图△</p><h2 id="深色模式和阅读模式"><a href="#深色模式和阅读模式" class="headerlink" title="深色模式和阅读模式"></a>深色模式和阅读模式</h2><br/><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408125408.png"  style="width:48%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120139.png"  style="width:48%;" /><p align="center">深色模式△</p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408125409.png"  style="width:48%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120143.png"  style="width:48%;" /><p align="center">阅读模式△</p><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><br/><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120606.png" style="width:24%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120147.png" style="width:24%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408120148.png" style="width:24%;" /><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200408130831.png" style="width:24%;" /><p align="center">移动端效果△</p><style scoped>    /* .content__default img{border: 1px solid #ccc;} */</style>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LG V30 韩版V300L 8.0 9.0 root刷类原生系统Havoc 10.0的详细过程</title>
    <link href="/posts/21.html"/>
    <url>/posts/21.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方系统：刷机root后，未安装其他软件，开机scene查看内存占50%<br>安装日常软件，开发者选项里面，系统可用用内存一般在200左右</p><span id="more"></span><p>Havoc 10：刷机root后，未安装其他任何软件，开机scene查看内存占37%<br>安装日常软件，开发者选项里面显示系统可用内存一般在1.3G左右<br>也就是说使用原生系统，系统可节约大概1G左右的内存<br>官方系统优势：4K显示，hifi音效，拍照，信号<br>havoc系统优势：流畅，省电<br>我不玩游戏，因为要安装支付宝（蚂蚁森林自动偷菜后台常驻），微信，微商相册，等软件，官方系统内存实在是不够用，反应慢，卡，实在是不能忍，换了havoc后，非常满意，上几张图<br>电池使用情况<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/%E7%94%B5%E6%B1%A02.jpg"></p><p>内存占用<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/%E5%86%85%E5%AD%982.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/%E5%86%85%E5%AD%983.jpg"></p><p>安装的软件<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/%E8%BD%AF%E4%BB%B6.jpg"></p><h1 id="刷机前的准备工作"><a href="#刷机前的准备工作" class="headerlink" title="刷机前的准备工作"></a>刷机前的准备工作</h1><p>参考：<a href="https://163168.xyz/archives/18.html">https://163168.xyz/archives/18.html</a><br>下载刷机系统和所需工具<br>链接: <a href="https://pan.baidu.com/s/1_tPSfWTyb8ZbHZs7HyKtBg">https://pan.baidu.com/s/1_tPSfWTyb8ZbHZs7HyKtBg</a> 提取码: 79ew<br>LG 手机官方系统下载地址<br><a href="https://lg-firmwares.com/lg-mv300l-firmwares/#tab=firmwares">https://lg-firmwares.com/lg-mv300l-firmwares/#tab=firmwares</a><br>安装好驱动和LGUP<br>记录手机的IMEI和SN等信息。</p><h1 id="刷机流程"><a href="#刷机流程" class="headerlink" title="刷机流程"></a>刷机流程</h1><h2 id="从8-0官方系统，混刷H93020d-00-OPEN-EU-OP-0326-kdz，并解锁root"><a href="#从8-0官方系统，混刷H93020d-00-OPEN-EU-OP-0326-kdz，并解锁root" class="headerlink" title="从8.0官方系统，混刷H93020d_00_OPEN_EU_OP_0326.kdz，并解锁root"></a>从8.0官方系统，混刷H93020d_00_OPEN_EU_OP_0326.kdz，并解锁root</h2><p>8.0 root教程可参照<br> <a href="https://163168.xyz/archives/18.html">https://163168.xyz/archives/18.html</a><br>9.0 root教程参考<br><a href="http://bbs.gfan.com/android-9614759-1-3.html">http://bbs.gfan.com/android-9614759-1-3.html</a><br><a href="http://bbs.gfan.com/android-9608902-1-1.html">http://bbs.gfan.com/android-9608902-1-1.html</a></p><h2 id="刷入官方9-0-300L30p-00-1220-kdz"><a href="#刷入官方9-0-300L30p-00-1220-kdz" class="headerlink" title="刷入官方9.0 300L30p_00_1220.kdz"></a>刷入官方9.0 300L30p_00_1220.kdz</h2><p>手机按住音量+号键，连接USB线插入电脑（最后是台式机插机箱后面的USB）大概6秒左右进入刷机模式<br>线刷300L30p_00_1220.kdz,  PD模式 除基带模块xbl xbl2 modem的三个分区不选,其他的全勾选<br>刷完后如果遇到卡LOGO，可用硬格: 按住音量减和电源键 8秒以上，会闪屏一下，当LOGO出现后，立刻松开，再重新按住关机键，直到出现data peset界面，才松开。用音量键选择YES（两次），按电源键 进入恢复出厂设置<br>手机进入系统后，打开开发者模式。USB连接电脑<br>在LGV30工具\LGV30 ROOT\3.解锁BL 里面找到Command Prompt  点击打开<br>输入adb  devices 回车     手机上会弹出授权.勾上后同意<br>输入  adb reboot bootloader  回车<br>输入 Fastboot flash recovery TWRP.img  回车<br>输入 Fastboot boot TWRP.img 回车<br>手机进入recovery 格式化DATA，清除chche<br>刷入 Magisk-v19.3.zip，<br>输入 Disable_Dm-Verity_ForceEncrypt_07.27.2019-test.zip<br>刷入 AK3_RCTD_Remover.zip</p><p>重启recovery  备份欧版官方的recocery （40M）备份好后复制到电脑</p><h2 id="刷回-9-0-300L30p-00-1220-kdz"><a href="#刷回-9-0-300L30p-00-1220-kdz" class="headerlink" title="刷回 9.0 300L30p_00_1220.kdz"></a>刷回 9.0 300L30p_00_1220.kdz</h2><p>线刷，选分区的时候排除recovery，recoverybak两个分区，刷完后会无限进TWRP<br>进TWRP后格式化DATA  清除chche<br>刷入 Magisk-v19.3.zip，<br>输入 Disable_Dm-Verity_ForceEncrypt_07.27.2019-test.zip<br>刷入 AK3_RCTD_Remover.zip<br>刷完后把之前备份复制到电脑的欧版recocery，（带备份日期和时间的这个文件夹）复制到手机，从TWRP恢复<br>我用的是8.0欧版recocery备份恢复的，9.0欧版recocery备份恢复我没有测试，有成功的朋友可用留言告诉我。<br>正常情况就可以开机了。<br>开机后连接一次wifi<br>进入开发者模式<br>在LGV30工具\LGV30 ROOT\3.解锁BL 里面找到Command Prompt  点击打开<br>输入adb shell<br>输入 su   手机点授权同意<br>复制 TWRP.img  到手机<br>输入dd if=/sdcard/TWRP.img of=/dev/block/bootdevice/by-name/recovery</p><h2 id="卡刷Havoc-OS-v3-2-20200228-h930-Unofficial"><a href="#卡刷Havoc-OS-v3-2-20200228-h930-Unofficial" class="headerlink" title="卡刷Havoc-OS-v3.2-20200228-h930-Unofficial"></a>卡刷Havoc-OS-v3.2-20200228-h930-Unofficial</h2><p>在LGV30工具\LGV30 ROOT\3.解锁BL 里面找到Command Prompt  点击打开<br>输入 adb devices<br>输入 adb reboot recovery<br>手机进入twrp后，四清，卡刷Havoc-OS-v3.2-20200228-h930-Unofficial</p><h1 id="遇到的问题和解决方法"><a href="#遇到的问题和解决方法" class="headerlink" title="遇到的问题和解决方法"></a>遇到的问题和解决方法</h1><h2 id="打开LGUP出现错误"><a href="#打开LGUP出现错误" class="headerlink" title="打开LGUP出现错误"></a>打开LGUP出现错误</h2><p>LGUP_Common.dll(任意刷包括9.0降级8.0)  下载并替换到安装文件夹</p><h2 id="twrp出现警告"><a href="#twrp出现警告" class="headerlink" title="twrp出现警告"></a>twrp出现警告</h2><p>格式化da’ta分区，再清除cache，一般就可用了</p><h2 id="卡LOGO"><a href="#卡LOGO" class="headerlink" title="卡LOGO"></a>卡LOGO</h2><p>可用硬格: 按住音量减和电源键 8秒以上，会闪屏一下，当LOGO出现后，立刻松开，再重新按住关机键，直到出现data peset界面，才松开。用音量键选择YES（两次），按电源键 进入恢复出厂设置</p><h2 id="手机无限重启"><a href="#手机无限重启" class="headerlink" title="手机无限重启"></a>手机无限重启</h2><p>同时按住音量减和电源键，强制关机，再硬格</p><h2 id="手机不能进刷机模式"><a href="#手机不能进刷机模式" class="headerlink" title="手机不能进刷机模式"></a>手机不能进刷机模式</h2><p>进入twrp，卡刷US998_20G_FULL.zip，我测试过两次不能进线刷模式，都是靠这个包恢复线刷模式的</p><h2 id="手机不能进刷机模式，也不能进recovery，硬格后也无限重启手机"><a href="#手机不能进刷机模式，也不能进recovery，硬格后也无限重启手机" class="headerlink" title="手机不能进刷机模式，也不能进recovery，硬格后也无限重启手机"></a>手机不能进刷机模式，也不能进recovery，硬格后也无限重启手机</h2><p>一直按住音量减 会进入bootloader模式<br>输入<br>fastboot flash recovery TWRP.img<br>再次输入<br>fastboot boot TWRP.img<br>进入 terp 四清，卡刷卡刷US998_20G_FULL.zip，再线刷韩版官方系统。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 测试 从8.0 root后，卡刷30q 卡刷Havoc   手机可用使用。关于手机，手机型号：Unknown<br>测试从9.0 H93020d卡刷30q 卡刷Havoc  手机可用使用，手机型号显示h930，开机2分钟后才会有信号，测试关闭飞行模式后也是两分钟左右出信号，信号不显示，就是一个空的三角形，不知道信号强度，可用打电话。<br>很多其他版本的机友反映要刷30q后开wifi，再刷Havoc，不会出现wifi的问题，但是韩版最新版本是30p，经过测试其实是可用用的<br>混刷是为了root，混刷后的系统信号差，断一次网，要等两分钟再连接，这个真不能忍。<br>教程的难点是9.0 混欧版刷root后，刷回韩版官方9.0p   如果长时间不能进系统，就只能按9.0 root的教程重新来一次。<br>混刷后一定记得要备份recovery，最好8.0和9.0的都备份<br>取得root 权限后要备份SN<br>参照 <a href="http://bbs.gfan.com/android-9574953-1-1.html">http://bbs.gfan.com/android-9574953-1-1.html</a><br>在LGV30工具\LGV30 ROOT\3.解锁BL 里面找到Command Prompt  点击打开<br>adb shell<br>su（此处注意手机上弹出授权提示）<br>dd if=/dev/block/bootdevice/by-name/ftm of=/sdcard/ftm-o.img<br>刷机掉了SN 只是输入 dd of=/dev/block/bootdevice/by-name/ftm if=/sdcard/ftm-mod.img<br>如果没有备份，先备份，备份好的ftm-o.img 复制到电脑，通过ultraedit 软件打开<br>找到12000H处，修改SM码 （非常难找，找了几分钟，眼睛都花）输入自己的SN码，据说输入别人的也可以。<br>修改后重启就可用了。</p><p>没一定把握就不要刷基带，风险大，容易9008</p>]]></content>
    
    
    <categories>
      
      <category>安卓手机</category>
      
      <category>LG V30</category>
      
      <category>刷机</category>
      
      <category>root</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓手机</tag>
      
      <tag>LG V30</tag>
      
      <tag>刷机</tag>
      
      <tag>root</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub加速下载项目的方法</title>
    <link href="/pages/95331c6a9613faf8"/>
    <url>/pages/95331c6a9613faf8</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub加速下载项目的方法"><a href="#GitHub加速下载项目的方法" class="headerlink" title="GitHub加速下载项目的方法"></a>GitHub加速下载项目的方法</h1><p>国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的项目时简直慢得无法忍受！下面介绍一种加载克隆项目的方法。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200309112604.png"></p><h2 id="利用码云来转接做下载加速"><a href="#利用码云来转接做下载加速" class="headerlink" title="利用码云来转接做下载加速"></a>利用码云来转接做下载加速</h2><ol><li><p>首先你得有一个 <a href="https://gitee.com/">码云</a> 的账号</p></li><li><p>登录码云之后在页面右上角的加号选择<code>从GitHub/GitLab导入项目</code></p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200309112711.jpg"></p></li><li><p>选择<code>从URL导入</code>，粘贴从GitHub复制来的仓库地址，然后导入，这个导入过程一般是很快的。</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200309112710.jpg"></p></li><li><p>从码云克隆刚导入的这个项目，克隆速度会快很多，网速好的能达到几兆每秒（具体速度就看你的网速了，吐槽一下我家网速，总在关键时刻显示”视频加载中”….）</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200309112712.jpg"></p></li><li><p>另外要注意的一点，克隆下来的项目关联的是码云的仓库，如果你需要关联github仓库需要更改远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v <span class="hljs-comment"># 查看关联的远程仓库</span><br>git remote rm &lt;仓库名&gt; <span class="hljs-comment"># 删除远程仓库</span><br>git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt; <span class="hljs-comment"># 关联远程仓库，仓库名一般使用origin</span><br></code></pre></td></tr></table></figure></li></ol><p>这个方法适合用于克隆比较大的项目，如果克隆小项目，20k/s的速度好像还能将就~~</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>GitHub技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>k2p老毛子固件绑定域名之 cloudflare.com</title>
    <link href="/posts/20.html"/>
    <url>/posts/20.html</url>
    
    <content type="html"><![CDATA[<p>k2p老毛子固件绑定域名之 cloudflare.com</p><p>使用 Cloudflare 实现顶级个人域名的 ddns 服务。 <a href="https://www.cloudflare.com/">https://www.cloudflare.com</a></p><p>使用前需要安装 curl 程序，可以安装opt后输入 opkg install curl 敲回车键安装启用opt<br> <span id="more"></span></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200103134738.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200103134543.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200103132446.png"></p><p>点击获取<br><a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200103132545.png"></p><p>输入密码和验证码，就可以获得</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200103132918.png"></p><p>复制到  用户 Global API Key</p>]]></content>
    
    
    <categories>
      
      <category>k2p</category>
      
      <category>域名</category>
      
      <category>cloudflare</category>
      
      <category>路由</category>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k2p</tag>
      
      <tag>域名</tag>
      
      <tag>cloudflare</tag>
      
      <tag>路由</tag>
      
      <tag>网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床</title>
    <link href="/pages/a5f73af5185fdf0a"/>
    <url>/pages/a5f73af5185fdf0a</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-jsDelivr-TinyPNG-PicGo-打造稳定快速、高效免费图床"><a href="#GitHub-jsDelivr-TinyPNG-PicGo-打造稳定快速、高效免费图床" class="headerlink" title="GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床"></a>GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Q：为什么要使用图床呢？什么是图床？</strong></p><p>A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把图片放到和博客同一个仓库当中，使用相对路径来引用，这样后期维护起来会比较麻烦。还有的朋友会在不同的平台发布同一篇文章，这样一来每个平台都要上传图片，为了解决这些问题，比较推荐的做法是把图片统一上传到一个在线的第三方静态资源库中，我们把这个资源库称为图床，其返回一个图片的URL，使用<code>markdown+图片url</code>的方式写作文章，一次编写，到处使用~</p><span id="more"></span><p><strong>Q：图床的选择</strong></p><p>A：推荐使用GitHub作为图床，特点是免费、稳定，有一个小缺点是国内访问速度慢，不过没关系，可以使用<code>jsDelivr</code>免费CDN加速。</p><p><strong>Q：jsDelivr是什么？</strong></p><p>A：<code>jsDelivr</code>是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费CDN服务」，无须担心中国防火墙问题而影响使用。官网：<a href="http://www.jsdelivr.com/">http://www.jsdelivr.com/</a></p><h2 id="图床打造"><a href="#图床打造" class="headerlink" title="图床打造"></a>图床打造</h2><ol><li><p>新建GitHub仓库，注意仓库要设置成<strong>公开</strong></p></li><li><p>参照 <a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">官方文档</a> 生成一个token密钥</p></li><li><p>在 <a href="https://github.com/Molunerfinn/picgo/releases">这里</a> 下载PicGo，安装完成后打开，<code>图床设置</code> 选 <code>GitHub图床</code>，并填写相应的信息</p><ul><li>仓库名：前面新建的仓库，格式：<code>&lt;用户名&gt;/&lt;仓库名&gt;</code></li><li>分支名：填写主分支<code>master</code>即可</li><li>Token：前面生成的token密钥</li><li>存储路径：按你自己的需求填写</li><li>自定义域名：图片上传后，PicGo 会按照 <code>自定义域名+上传的图片名</code> 的方式生成访问链接，此处我们填写<code>jsDelivr</code>的CDN加速地址，格式：<code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;</code></li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103105720.png"></p><ol start="4"><li>使用<a href="https://tinypng.cn/">https://tinypng.cn/</a>压缩你要上传的图片（如图片已经很小或你有更好的压缩工具可省略这一步）</li><li>在PigGo的<code>上传区</code>上传你的图片，到<code>相册</code>一键复制刚刚上传的图片URL，至此，你就可以在你的文章当中愉快的插入图片啦~， 更多功能自己去探索吧~~</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103121148.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Actions 定时运行代码：每天定时百度链接推送</title>
    <link href="/pages/f44d2f9ad04ab8d3"/>
    <url>/pages/f44d2f9ad04ab8d3</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Actions-定时运行代码：每天定时百度链接推送"><a href="#GitHub-Actions-定时运行代码：每天定时百度链接推送" class="headerlink" title="GitHub Actions 定时运行代码：每天定时百度链接推送"></a>GitHub Actions 定时运行代码：每天定时百度链接推送</h1><p>博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入网站之外，还有一个实时的主动推送更高效。</p><p>最近刚好了解到GitHub Actions的定时运行代码功能，可以用它来每天自动运行命令生成所有博客链接并进行一次性推送给百度。</p><p>GitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，但也可用作代码运行环境。<strong>功能非常强大，能够玩出许多花样。</strong></p><span id="more"></span><h2 id="百度主动链接推送"><a href="#百度主动链接推送" class="headerlink" title="百度主动链接推送"></a>百度主动链接推送</h2><p>链接主动推送在百度站长中有介绍，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103124306.png" alt="主动提交"></p><p>具体使用方法就是创建一个文件<code>urls.txt</code>，文件内每行一条链接的格式写入提交的多个链接，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103124305.png" alt="urls.txt"></p><p>运行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -H <span class="hljs-string">&#x27;Content-Type:text/plain&#x27;</span> --data-binary @urls.txt <span class="hljs-string">&quot;http://data.zz.baidu.com/urls?site=xugaoyi.com&amp;token=T5PEAzhG*****&quot;</span><br></code></pre></td></tr></table></figure><p>上面命令的地址和参数由百度站长提供。运行完命令会返回推送结果，不出意外的话就会把<code>urls.txt</code>内的所有链接一次性推送给百度。</p><p>这个方法虽然比嵌入网站头部的自动推送更高效，但是也有它的麻烦之处，就是得自己填入链接到<code>urls.txt</code>文件，然后手动运行命令。</p><h2 id="自动生成urls-txt"><a href="#自动生成urls-txt" class="headerlink" title="自动生成urls.txt"></a>自动生成urls.txt</h2><p>没关系，技术的本质就是让人”偷懒”的。于是，我写了一个nodejs工具，用于把所有的博客页面链接生成到<code>urls.txt</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// baiduPush.js</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成百度链接推送文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tracer&#x27;</span>).colorConsole();<br><span class="hljs-keyword">const</span> matter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gray-matter&#x27;</span>); <span class="hljs-comment">// FrontMatter解析器 https://github.com/jonschlinkert/gray-matter</span><br><span class="hljs-keyword">const</span> readFileList = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/readFileList&#x27;</span>);<br><span class="hljs-keyword">const</span> urlsRoot = path.join(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;urls.txt&#x27;</span>); <span class="hljs-comment">// 百度链接推送文件</span><br><span class="hljs-keyword">const</span> DOMAIN = process.argv.splice(<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 获取命令行传入的参数</span><br><br><span class="hljs-keyword">if</span> (!DOMAIN) &#123;<br>  logger.error(<span class="hljs-string">&#x27;请在运行此文件时指定一个你要进行百度推送的域名参数，例：node utils/baiduPush.js https://xugaoyi.com&#x27;</span>)<br>  <span class="hljs-keyword">return</span><br>&#125;<br><br>main();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;<br>  fs.writeFileSync(urlsRoot, DOMAIN)<br>  <span class="hljs-keyword">const</span> files = readFileList(); <span class="hljs-comment">// 读取所有md文件数据</span><br><br>  files.forEach( <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = matter(fs.readFileSync(file.filePath, <span class="hljs-string">&#x27;utf8&#x27;</span>)); <br><br>    <span class="hljs-keyword">if</span> (data.permalink) &#123;<br>      <span class="hljs-keyword">const</span> link = <span class="hljs-string">`\r\n<span class="hljs-subst">$&#123;DOMAIN&#125;</span><span class="hljs-subst">$&#123;data.permalink&#125;</span>/`</span>;<br>      <span class="hljs-built_in">console</span>.log(link)<br>      fs.appendFileSync(urlsRoot, link);<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码仅是针对我个人的博客生成链接到<code>urls.txt</code>文件。更多代码在 <a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/utils/baiduPush.js">这里</a>。</p><p>运行如下命令就可以生产一个包含博客所有链接的<code>urls.txt</code>文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node utils/baiduPush.js https://xugaoyi.com<br></code></pre></td></tr></table></figure><p>哈哈，第一个麻烦解决了:smirk:，接下来是解决第二个需要手动运行推送命令的问题。</p><blockquote><p><strong>如果你没办法自动生成，你也可以自己手动创建一个<code>urls.txt</code>文件，放到github仓库。</strong></p></blockquote><h2 id="GitHub-Actions-定时运行代码"><a href="#GitHub-Actions-定时运行代码" class="headerlink" title="GitHub Actions 定时运行代码"></a>GitHub Actions 定时运行代码</h2><p>今天的主角GitHub Actions 要登场了。（相关：<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html?20191227113947#comment-last">GitHub Actions 入门教程</a>、<a href="https://xugaoyi.com/pages/6b9d359ec5aa5019/">GitHub Actions 实现自动部署静态博客</a>）</p><p>GitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，但也可用作代码运行环境。<strong>功能非常强大，能够玩出许多花样。</strong></p><h3 id="配置-GitHub-Actions"><a href="#配置-GitHub-Actions" class="headerlink" title="配置 GitHub Actions"></a>配置 GitHub Actions</h3><p>触发 GitHub Actions 需要在项目仓库新建一个<code>.github/workflows</code>子目录，里面是 <a href="https://xugaoyi.com/pages/4e8444e2d534d14f/">YAML 格式</a>配置文件，文件名可以随便取。GitHub 只要发现配置文件，就会运行 Actions。</p><p>配置文件的第一部分是触发条件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## baiduPush.yml</span><br>name: <span class="hljs-string">&#x27;baiduPush&#x27;</span><br> <br>on:<br>  push:<br>  schedule:<br>    - cron: <span class="hljs-string">&#x27;0 23 * * *&#x27;</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>name</code>字段是配置文件的描述，<code>on</code>字段是触发条件。我们指定两种情况下触发，第一种是代码 Push 进仓库，第二种是<a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#scheduled-events-schedule">定时任务</a>，每天在国际标准时间23点（北京时间+8，即早上7点）运行。</p><blockquote><p>定时设置看<a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#scheduled-events-schedule">这里</a></p></blockquote><p>接着，就是运行流程。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">jobs</span>:<br>  bot:<br>    runs-on: ubuntu-latest <span class="hljs-comment"># 运行环境为最新版的Ubuntu</span><br>    steps:<br>      - name: <span class="hljs-string">&#x27;Checkout codes&#x27;</span> <span class="hljs-comment"># 步骤一，获取仓库代码</span><br>        uses: actions/checkout@v1<br>      - name: <span class="hljs-string">&#x27;Run baiduPush.sh&#x27;</span> <span class="hljs-comment"># 步骤二，执行sh命令文件</span><br>        run: npm install &amp;&amp; npm run baiduPush <span class="hljs-comment"># 运行命令。（注意，运行目录是仓库根目录）</span><br></code></pre></td></tr></table></figure><p>上面代码中，指定运行环境是最新的ubuntu，流程的第一步是从代码仓库获取代码，第二步运行两个命令，先安装项目依赖，再运行写在<code>package.json</code>的<code>baiduPush</code>命令。完整代码看 <a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/.github/workflows/baiduPush.yml">这里</a></p><h3 id="baiduPush命令在package-json配置"><a href="#baiduPush命令在package-json配置" class="headerlink" title="baiduPush命令在package.json配置"></a><code>baiduPush</code>命令在<code>package.json</code>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;baiduPush&quot;</span>: <span class="hljs-string">&quot;node utils/baiduPush.js https://xugaoyi.com &amp;&amp; bash baiduPush.sh&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面脚本中在<code>node utils/baiduPush.js</code>的后面加入你的域名参数。运行此命令生成<code>urls.txt</code>文件，然后执行<code>baiduPush.sh</code>文件。</p><p>注意，在使用window系统时，请使用git bash命令窗运行上面的脚本。</p><blockquote><p><code>baiduPush</code>命令之所以没有放在<code>baiduPush.yml</code>的 run 里面是因为我想在本地也可以执行<code>npm run baiduPush</code>命令。</p></blockquote><h3 id="baiduPush-sh执行百度推送命令"><a href="#baiduPush-sh执行百度推送命令" class="headerlink" title="baiduPush.sh执行百度推送命令"></a><code>baiduPush.sh</code>执行百度推送命令</h3><p><code>baiduPush.sh</code>文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><br><span class="hljs-built_in">set</span> -e<br><br><span class="hljs-comment"># 百度链接推送</span><br>curl -H <span class="hljs-string">&#x27;Content-Type:text/plain&#x27;</span> --data-binary @urls.txt <span class="hljs-string">&quot;http://data.zz.baidu.com/urls?site=https://xugaoyi.com&amp;token=T5PEAzhGa*****&quot;</span><br><br>rm -rf urls.txt <span class="hljs-comment"># 灭迹</span><br></code></pre></td></tr></table></figure><p>上面代码中，把<code>urls.txt</code>文件中的所有链接一次性推送。</p><blockquote><p>baiduPush.sh内的命令之所以没有写在<code>package.json</code>是因为我觉得命令太长了，不方便阅读。</p></blockquote><p>写好配置，推送到仓库，就会在每天的早上7点钟，自动运行命令生成一个包含博客所有页面链接的<code>urls.txt</code>文件，并把所有链接一次性推送到百度。麻麻再也不用担心我的网站不被收录~~:kissing_heart: :kissing_heart: :kissing_heart: </p><p>在这个基础上可以扩展，使用GitHub Actions满足你自己的各种定时需求。</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://xugaoyi.com/pages/6b9d359ec5aa5019/">《 GitHub Actions 实现自动部署静态博客》</a></p><p><a href="https://xugaoyi.com/pages/41f87d890d0a02af/">《解决百度无法收录搭建在GitHub上的静态博客的问题》</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>GitHub技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Actions 实现自动部署静态博客</title>
    <link href="/pages/6b9d359ec5aa5019"/>
    <url>/pages/6b9d359ec5aa5019</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Actions-实现自动部署静态博客"><a href="#GitHub-Actions-实现自动部署静态博客" class="headerlink" title="GitHub Actions 实现自动部署静态博客"></a>GitHub Actions 实现自动部署静态博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我使用vuepress搭建了一个静态博客，挂在了Github pages和<a href="https://dev.tencent.com/">Coding pages</a>上面。</p><p>coding pages在国内的访问速度比github pages要快很多，而且还可以被百度收录。</p><span id="more"></span><p>一开始的部署方式是使用<a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/deploy.sh">sh部署脚本</a>把代码提交到这两个平台的仓库分支，虽然已经很方便了，但是我还想把博客未打包的源码提交到Github主分支上。这就需要我操作两次命令，<strong>我就想能不能只需要一次操作就可以同时把源码、部署代码一次性提交到两个平台呢？</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在了解GitHub Actions最近（2019.12）刚正式发布了之后，尝试使用它发现能够满足我的需求。<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html?20191227113947#comment-last">GitHub Actions 入门教程</a></p><p>首先，需要获取token，后面会用到。获取方法：github获取token<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">官方文档</a>、coding获取token<a href="https://dev.tencent.com/help/doc/account/access-token">官方文档</a>。</p><p>然后，将这两个token同时储存到github仓库的<code>Settings/Secrets</code>里面。变量名可以随便取，但是注意要和后面的<code>ci.yml</code>文件内的变量名一致，这里取的是<code>ACCESS_TOKEN</code>和<code>CODING_TOKEN</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103124812.jpg" alt="token设置" title="token设置"></p><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p><p>workflow 文件采用 <a href="https://xugaoyi.com/pages/4e8444e2d534d14f/">YAML 格式</a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>ci.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。    </p><p>我的<code>ci.yml</code>文件：    </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><br><span class="hljs-comment"># 在master分支发生push事件时触发。</span><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><span class="hljs-attr">jobs:</span> <span class="hljs-comment"># 工作流</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment">#运行在虚拟机环境ubuntu-latest</span><br><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">node-version:</span> [<span class="hljs-number">10.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-comment"># 步骤1</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span> <span class="hljs-comment"># 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># 步骤2</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span> <span class="hljs-comment"># 作用：安装nodejs</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># 版本</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy.sh</span> <span class="hljs-comment"># 步骤3 （同时部署到github和coding）</span><br>        <span class="hljs-attr">env:</span> <span class="hljs-comment"># 设置环境变量</span><br>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACCESS_TOKEN</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># toKen私密变量</span><br>          <span class="hljs-attr">CODING_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.CODING_TOKEN</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># 腾讯云开发者平台（coding）私密token</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span> <span class="hljs-comment"># 执行的命令  </span><br>        <span class="hljs-comment"># package.json 中添加 &quot;deploy&quot;: &quot;bash deploy.sh&quot;</span><br></code></pre></td></tr></table></figure><p>这个配置文件会在我push提交代码到主分支时触发工作，运行环境是<code>ubuntu-latest</code>，工作步骤：</p><ul><li><p>一，获取仓库源码</p></li><li><p>二，安装nodejs，打包项目有用到nodejs</p></li><li><p>三，把token设置到环境变量，安装项目依赖，并运行<code>deploy.sh</code>文件，</p></li></ul><blockquote><p>ACCESS_TOKE 和 CODING_TOKEN 都是保存在github仓库的<code>Settings/Secrets</code>位置的私密变量，仓库代码中可以通过&lt;secrets.变量名&gt;来获取，保证了token的私密性。</p></blockquote><p>再来看看将要被运行的<code>deploy.sh</code>部署代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-comment"># 确保脚本抛出遇到的错误</span><br><span class="hljs-built_in">set</span> -e<br>npm run build <span class="hljs-comment"># 生成静态文件</span><br><span class="hljs-built_in">cd</span> docs/.vuepress/dist <span class="hljs-comment"># 进入生成的文件夹</span><br><br><span class="hljs-comment"># deploy to github</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;blog.xugaoyi.com&#x27;</span> &gt; CNAME<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$GITHUB_TOKEN</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  msg=<span class="hljs-string">&#x27;deploy&#x27;</span><br>  githubUrl=git@github.com:xugaoyi/blog.git<br><span class="hljs-keyword">else</span><br>  msg=<span class="hljs-string">&#x27;来自github action的自动部署&#x27;</span><br>  githubUrl=https://xugaoyi:<span class="hljs-variable">$&#123;GITHUB_TOKEN&#125;</span>@github.com/xugaoyi/blog.git<br>  git config --global user.name <span class="hljs-string">&quot;xugaoyi&quot;</span><br>  git config --global user.email <span class="hljs-string">&quot;894072666@qq.com&quot;</span><br><span class="hljs-keyword">fi</span><br>git init<br>git add -A<br>git commit -m <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;msg&#125;</span>&quot;</span><br>git push -f <span class="hljs-variable">$githubUrl</span> master:gh-pages <span class="hljs-comment"># 推送到github</span><br><br><span class="hljs-comment"># deploy to coding</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;www.xugaoyi.com\nxugaoyi.com&#x27;</span> &gt; CNAME  <span class="hljs-comment"># 自定义域名</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$CODING_TOKEN</span>&quot;</span> ]; <span class="hljs-keyword">then</span>  <span class="hljs-comment"># -z 字符串 长度为0则为true；$CODING_TOKEN来自于github仓库`Settings/Secrets`设置的私密环境变量</span><br>  codingUrl=git@git.dev.tencent.com:xugaoyi/xugaoyi.git<br><span class="hljs-keyword">else</span><br>  codingUrl=https://xugaoyi:<span class="hljs-variable">$&#123;CODING_TOKEN&#125;</span>@git.dev.tencent.com/xugaoyi/xugaoyi.git<br><span class="hljs-keyword">fi</span><br>git add -A<br>git commit -m <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;msg&#125;</span>&quot;</span><br>git push -f <span class="hljs-variable">$codingUrl</span> master <span class="hljs-comment"># 推送到coding</span><br><br><span class="hljs-built_in">cd</span> -<br>rm -rf docs/.vuepress/dist<br></code></pre></td></tr></table></figure><p>这个文件使用<a href="https://ipcmen.com/">Shell命令</a>写的，它会先运行打包命令，进入打包好的文件，创建一个自定义域名的CNAME文件（如果你没有自定义域名可去掉这个命令），判断是否有token环境变量，如果没有说明是在本地自己的电脑上运行的部署，使用ssh代码仓库地址，如果有token环境变量，说明是GitHub Actions自动触发的部署，此时使用的是可以通过toKen来获取代码提交权限的提交地址。最后通过git命令提交到各自的仓库，完成部署。</p><blockquote><p>提示：</p><ul><li><p>Shell 可以获取到环境变量。</p></li><li><p>我想给两个平台上部署的博客不一样的自定义域名，因此做了分开创建CNAME文件，分开提交。</p></li></ul></blockquote><p>至此，我前面提到的需求就实现啦，只需要把源码push到github仓库这一个步骤，后面的博客打包、部署到github和coding等工作都由GitHub Actions来自动完成。</p><p>如下你想查看部署日志，你可以到github仓库的Actions这一项查看。</p><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103124813.png" alt="部署日志" title="部署日志"></p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://xugaoyi.com/pages/f44d2f9ad04ab8d3/">《GitHub Actions 定时运行代码：每天定时百度链接推送》</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>GitHub技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决百度无法收录搭建在GitHub上的个人博客的问题</title>
    <link href="/pages/41f87d890d0a02af"/>
    <url>/pages/41f87d890d0a02af</url>
    
    <content type="html"><![CDATA[<h1 id="解决百度无法收录搭建在GitHub上的静态博客的问题"><a href="#解决百度无法收录搭建在GitHub上的静态博客的问题" class="headerlink" title="解决百度无法收录搭建在GitHub上的静态博客的问题"></a>解决百度无法收录搭建在GitHub上的静态博客的问题</h1><p>::: warning<br>如果你正在寻找本博客的搭建文档，博主建议您查看这个仓库的<a href="https://github.com/xugaoyi/vuepress-theme-vdoing">README</a>。<br>:::</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于GitHub禁止百度爬虫访问，造成托管在GitHub Pages上的博客无法被百度收录。相关问题可以通过百度站长平台的<code>抓取诊断</code>再现，每次都是403 Forbidden的错误。</p><span id="more"></span><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>同时将博客同时同步托管到GitHub Pages和<a href="https://dev.tencent.com/">coding pages</a>上，解决百度不收录问题。最后发现在国内使用coding pages打开速度特别快，而且还会被百度收录，因此我把coding pages的站点作为主站点，原本在github pages的作为分站点。</p><p>步骤：</p><p>1、注册<a href="https://dev.tencent.com/">coding</a>账号，创建仓库，把代码推送到coding仓库，并开启pages服务。</p><blockquote><p>git 操作部分和使用github的差不多，不了解git操作的可以看我的另一篇文章：<a href="https://xugaoyi.com/pages/9a7ee40fc232253e/">Git使用手册</a></p></blockquote><p>2、我的博客项目使用vuepress搭建的，使用的是如下自动部署脚本，同时将代码推送到github和conding。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><br><span class="hljs-comment"># 确保脚本抛出遇到的错误</span><br><span class="hljs-built_in">set</span> -e<br><br><span class="hljs-comment"># 生成静态文件</span><br>npm run build<br><br><span class="hljs-comment"># 进入生成的文件夹</span><br><span class="hljs-built_in">cd</span> docs/.vuepress/dist<br><br><span class="hljs-comment"># github</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;b.xugaoyi.com&#x27;</span> &gt; CNAME<br>git init<br>git add -A<br>git commit -m <span class="hljs-string">&#x27;deploy&#x27;</span><br>git push -f git@github.com:xugaoyi/blog.git master:gh-pages <span class="hljs-comment"># 发布到github</span><br><br><span class="hljs-comment"># coding</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;xugaoyi.com&#x27;</span> &gt; CNAME<br>git add -A<br>git commit -m <span class="hljs-string">&#x27;deploy&#x27;</span><br>git push -f git@git.dev.tencent.com:xugaoyi/xugaoyi.git master <span class="hljs-comment"># 发布到coding</span><br><br><span class="hljs-built_in">cd</span> - <span class="hljs-comment"># 退回开始所在目录</span><br>rm -rf docs/.vuepress/dist<br></code></pre></td></tr></table></figure><blockquote><p>因为我想给两个平台上绑定不同的自定义域名，因此我分开创建了CNAME文件。</p></blockquote><p>3、有自定义域名的，也可以在coding pages绑定自定义域名，域名DNS解析中添加CNAME记录指向coding pages的站点地址即可。（没有自定义域名的可忽略，同时把自动部署脚本中的创建CNAME文件的脚本去掉）</p><p>最后，使用百度站长的抓取诊断，发现抓取成功啦，再使用百度站长的<a href="https://ziyuan.baidu.com/linksubmit/index">链接提交</a>功能，把链接提交给百度，过一段时间就可能在百度搜索中搜索到啦。</p><h3 id="如何知道百度有没有收录？"><a href="#如何知道百度有没有收录？" class="headerlink" title="如何知道百度有没有收录？"></a>如何知道百度有没有收录？</h3><p>在百度搜索框中使用site:&lt;链接地址&gt;，如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">site:</span>xugaoyi.com<br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://xugaoyi.com/pages/f44d2f9ad04ab8d3/">《GitHub Actions 定时运行代码：每天定时百度链接推送》</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub高级搜索技巧</title>
    <link href="/pages/4c778760be26d8b3"/>
    <url>/pages/4c778760be26d8b3</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub高级搜索技巧"><a href="#GitHub高级搜索技巧" class="headerlink" title="GitHub高级搜索技巧"></a>GitHub高级搜索技巧</h1><p><code>in:name &lt;关键字&gt;</code><br> 仓库名称带关键字查询</p><p><code>in:description &lt;关键字&gt;</code><br> 仓库描述带关键字查询</p><p><code>in:readme &lt;关键字&gt;</code><br> README文件带关键字查询</p><span id="more"></span><p><code>stars(fork): &gt;(=) &lt;数字&gt; &lt;关键字&gt;</code><br> star或fork数大于(或等于)指定数字的带关键字查询</p><p><code>stars(fork): 10..20 &lt;关键词&gt;</code><br> star或fork数在10到20之间的带关键字查询</p><p><code>size:&gt;=5000 &lt;关键词&gt;</code><br> 限定仓库大于等于5000K的带关键字查询</p><p><code>pushed(created):&gt;2019-11-15 &lt;关键字&gt;</code><br> 更新 或 创建 日期在2019年11月16日之后的带关键字查询</p><p><code>license:apache-2.0 &lt;关键字&gt;</code><br> LICENSE为apache-2.0的带关键字查询</p><p><code>language:java &lt;关键词&gt;</code><br> 仓库语言为Java的带关键字查询</p><p><code>user:&lt;用户名&gt;</code><br> 查询某个用户的项目</p><p><code>org:&lt;组织名&gt;</code><br> 查询某个组织的项目</p><p>*<strong>以上查询条件可组合使用，空格隔开</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 示例1：搜索仓库名包含javascript，并且stars数大于1000的项目</span><br><span class="hljs-keyword">in</span>:name javascript stars:&gt;1000<br><br><span class="hljs-comment"># 示例2：搜索描述中包含&quot;小程序&quot;，并且fork大于100，并且最近更新时间在2019-11-15之后的，并且使用开发语言为vue的项目</span><br><span class="hljs-keyword">in</span>:description 小程序 fork:&gt;100 pushed:&gt;2019-11-15 language:vue<br></code></pre></td></tr></table></figure><p>*<strong>或使用高级搜索页搜索：</strong></p><p><a href="https://github.com/search/advanced">https://github.com/search/advanced</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>GitHub技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Gitalk实现静态博客无后台评论系统</title>
    <link href="/pages/1da0bf9a988eafe5"/>
    <url>/pages/1da0bf9a988eafe5</url>
    
    <content type="html"><![CDATA[<h1 id="使用Gitalk实现静态博客无后台评论系统"><a href="#使用Gitalk实现静态博客无后台评论系统" class="headerlink" title="使用Gitalk实现静态博客无后台评论系统"></a>使用Gitalk实现静态博客无后台评论系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Gitalk，一个基于 Github Issue 和 Preact 开发的评论插件。</p><p>下面我们来用它在vuepress搭建的博客中搭建评论区吧</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>使用一个新的东西首先当然是要了解它</p><p>Gitalk demo：<a href="https://gitalk.github.io/">https://gitalk.github.io/</a></p><p>Gitalk github：<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>如何实现？最好的方法我认为是看<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">官方文档</a>，这里我只是记录一下实现的步骤。</p><p>使用一个别人已经开发好的 <a href="https://github.com/dongyuanxin/vuepress-plugin-comment">vuepress-plugin-comment</a> 插件来帮助我们把Gitalk应用到vuepress搭建的静态博客。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save vuepress-plugin-comment<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>options</code>的配置和<code>Gitalk</code>的配置相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  plugins: [<br>    [<br>      <span class="hljs-string">&#x27;vuepress-plugin-comment&#x27;</span>,<br>      &#123;<br>        choosen: <span class="hljs-string">&#x27;gitalk&#x27;</span>, <br>        options: &#123;<br>          clientID: <span class="hljs-string">&#x27;GitHub Application Client ID&#x27;</span>,<br>          clientSecret: <span class="hljs-string">&#x27;GitHub Application Client Secret&#x27;</span>,<br>          repo: <span class="hljs-string">&#x27;GitHub repo&#x27;</span>,<br>          owner: <span class="hljs-string">&#x27;GitHub repo owner&#x27;</span>,<br>          admin: [<span class="hljs-string">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],<br>          distractionFreeMode: <span class="hljs-literal">false</span> <br>        &#125;<br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>需要 <strong>GitHub Application</strong>，如果没有 <a href="https://github.com/settings/applications/new">点击这里申请</a>，<code>Authorization callback URL</code> 填写当前使用插件页面的域名。</p><p><img src="https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/QQ%E6%88%AA%E5%9B%BE20191220124134.jpg"></p><p>申请完成就会得 Client ID 和 Client Secret。然后把对应参数填写到配置中，例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  plugins: [<br>    [<br>      <span class="hljs-string">&#x27;vuepress-plugin-comment&#x27;</span>,<br>      &#123;<br>        choosen: <span class="hljs-string">&#x27;gitalk&#x27;</span>, <br>        options: &#123;<br>          clientID: <span class="hljs-string">&#x27;a6e*******4709b88b&#x27;</span>,<br>          clientSecret: <span class="hljs-string">&#x27;f0e***************beb8b2d54d7241&#x27;</span>,<br>          repo: <span class="hljs-string">&#x27;blog&#x27;</span>, <span class="hljs-comment">// GitHub 仓库</span><br>          owner: <span class="hljs-string">&#x27;xugaoyi&#x27;</span>, <span class="hljs-comment">// GitHub仓库所有者</span><br>          admin: [<span class="hljs-string">&#x27;xugaoyi&#x27;</span>], <span class="hljs-comment">// 对仓库有写权限的人</span><br>          distractionFreeMode: <span class="hljs-literal">false</span> <br>        &#125;<br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>配置好之后重启项目就发现页面上多了一个评论区，说明评论功能实现啦。但还是有一些bug，继续完善它~</p><h3 id="BUG修复"><a href="#BUG修复" class="headerlink" title="BUG修复"></a>BUG修复</h3><p><strong>评论区与博客样式不匹配</strong></p><p>解决办法：新增全局样式文件<code>.vuepress/styles/index.styl</code>，写入样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#vuepress-plugin-comment<br>  <span class="hljs-attribute">max-width</span> <span class="hljs-variable">$contentWidth</span><br>  <span class="hljs-attribute">margin</span> <span class="hljs-number">0</span> auto<br>  <span class="hljs-attribute">padding</span> <span class="hljs-number">2rem</span> <span class="hljs-number">2.5rem</span><br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: $MQNarrow)<br>    padding <span class="hljs-number">2rem</span><br>  @media (<span class="hljs-attribute">max-width</span>: $MQMobileNarrow)<br>    padding <span class="hljs-number">1.5rem</span><br></code></pre></td></tr></table></figure><p><strong>评论区出现 Error: Validation Failed.</strong></p><p>问题分析：当页面 链接过长  或 存在中文链接，导致整个链接字符串长度超过50时，会造成请求issues接口失败，出现422状态码。（中文链接会自动转码，变得很长，id参数默认取的是链接，长度不能超过50）</p><p>解决办法：手动设置id取值，限制长度不超过50。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br> choosen: <span class="hljs-string">&#x27;gitalk&#x27;</span>, <br> options: &#123;<br>   ...<br>   id: <span class="hljs-string">&quot;&lt;%- (window.location.origin + (frontmatter.to.path || window.location.pathname)).slice(-50) %&gt;&quot;</span>, <span class="hljs-comment">//  页面的唯一标识,长度不能超过50</span><br>   title: <span class="hljs-string">&quot;「评论」&lt;%- document.title %&gt;&quot;</span>, <span class="hljs-comment">// GitHub issue 的标题</span><br>   labels: [<span class="hljs-string">&quot;Gitalk&quot;</span>, <span class="hljs-string">&quot;Comment&quot;</span>], <span class="hljs-comment">// GitHub issue 的标签</span><br>   body:<span class="hljs-string">&quot;&lt;%- document.title %&gt;：&lt;%- window.location.origin + (frontmatter.to.path || window.location.pathname) %&gt;&quot;</span> <span class="hljs-comment">// GitHub issue 的内容</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>访问变量时，如 <code>$frontmatter</code> 或 <code>window</code>等，请使用  <strong>EJS</strong> 语法。因为在配置中不能使用回调函数，会被vuepress过滤，因此使用 <strong>EJS</strong> 语法。 ——插件作者文档说明</p></blockquote><p><strong>切换页面后评论区内容还是上一个页面的评论</strong></p><p>解决：id在获取<code>path</code>时使用 <code>frontmatter.to.path</code>，插件内置了 ``frontmatter.from<code>、</code>frontmatter.to`。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br> choosen: <span class="hljs-string">&#x27;gitalk&#x27;</span>, <br> options: &#123;<br>   ...<br>   id: <span class="hljs-string">&quot;&lt;%- (window.location.origin + (frontmatter.to.path || window.location.pathname)).slice(-50) %&gt;&quot;</span>, <span class="hljs-comment">//  页面的唯一标识,长度不能超过50</span><br>   title: <span class="hljs-string">&quot;「评论」&lt;%- document.title %&gt;&quot;</span>, <span class="hljs-comment">// GitHub issue 的标题</span><br>   labels: [<span class="hljs-string">&quot;Gitalk&quot;</span>, <span class="hljs-string">&quot;Comment&quot;</span>], <span class="hljs-comment">// GitHub issue 的标签</span><br>   body:<span class="hljs-string">&quot;&lt;%- document.title %&gt;：&lt;%- window.location.origin + (frontmatter.to.path || window.location.pathname) %&gt;&quot;</span> <span class="hljs-comment">// GitHub issue 的内容</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LG V30韩版 ROOT详细教程</title>
    <link href="/posts/18.html"/>
    <url>/posts/18.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019年最火的洋垃圾LG V30，骁龙835cpu（从此告别发烧），4G内存，64G储存，能满足日用生活，能玩游戏，2k屏幕，hifi，极高的性价比。</p><span id="more"></span><h1 id="LG-V30韩版-ROOT详细教程"><a href="#LG-V30韩版-ROOT详细教程" class="headerlink" title="LG V30韩版 ROOT详细教程"></a>LG V30韩版 ROOT详细教程</h1><p>一个非常详细的视频教程，建议大家仔细观看，全部看懂了再来操作<br><a href="https://www.bilibili.com/video/av47071667">https://www.bilibili.com/video/av47071667</a><br>看视频刷机比较麻烦，我把视频整理成图文版的，包括命令这些，方便机友们刷机<br>需要的工具视频下面的评论里面都有的，大家可以先去下载</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装LG官方驱动"><a href="#安装LG官方驱动" class="headerlink" title="安装LG官方驱动"></a>安装LG官方驱动</h2><h2 id="安装LGUP刷机工具"><a href="#安装LGUP刷机工具" class="headerlink" title="安装LGUP刷机工具"></a>安装LGUP刷机工具</h2><p>把下载的modle和LGUP覆盖到安卓目录</p><h2 id="安装谷歌驱动"><a href="#安装谷歌驱动" class="headerlink" title="安装谷歌驱动"></a>安装谷歌驱动</h2><p>首先下载并打开此ADB工具箱<a href="http://pan.baidu.com/s/1nuHwTcP">http://pan.baidu.com/s/1nuHwTcP</a><br>在弹出的窗口中输入y并按回车，依次重复操作3 次</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223193123.png"></p><h1 id="混刷-h930的kdz"><a href="#混刷-h930的kdz" class="headerlink" title="混刷 h930的kdz"></a>混刷 h930的kdz</h1><p>手机拔掉sim卡，断开wifi，退出google账户，设置，常规，关于手机，软件信息，连续点击内部版本号开启开发人员选项。<br>进入开发人员选项，点击启用OEM解锁，和USB调试，手机关机。关机后，按住音量+，插入已经连接电脑的USB线，手机会进入download 刷机模式<br>右键点击LGUP软件，选择以管理员身份运行，</p><p> <img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223132526.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223132704.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223132846.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223132942.png"></p><p>刷完之后会卡LOGO</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223133059.png"></p><p>按住音量减和电源键 8秒以上，会闪屏一下，当LOGO出现后，立刻松开，再重新按住关机键，直到出现data peset界面，才松开。用音量键选择YES，按电源键 进入恢复出厂设置</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223133708.png"></p><p>开始硬格手机，格式完毕后，就可以进入系统，手机开机没有基带的，不能使用SIM卡，</p><h1 id="解锁BootLoader"><a href="#解锁BootLoader" class="headerlink" title="解锁BootLoader"></a>解锁BootLoader</h1><p>按照前面的教程打开设置进入开发者模式，启用OEM解锁，和USB调试，usb调成照片传输模式</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223134217.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223134343.png"></p><p>LG V30工具包里有命令的，我还是把命令贴这里，方便一些<br>输入命令<br>adb devices<br>勾选手机始终运行在此计算机上进行操作，点确定<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223160120.png"></p><p>adb reboot bootloader<br>—–进入了fastboot—–<br>fastboot flash unlock unlock.bin</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223160511.png"></p><p>fastboot reboot<br>—–解锁了BL并重启了手机—–<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223160704.png"></p><p>手机开机后，按照前面的教程打开设置进入开发者模式，启用OEM解锁，和USB调试，usb调成照片传输模式</p><p>输入<br>adb devices<br>adb reboot bootloader<br>fastboot getvar unlocked<br>出现 yes  就是解锁成功了。<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223161325.png"></p><p>—-进入fastboot以查看是否解锁—–</p><h1 id="root，备份欧版recovery"><a href="#root，备份欧版recovery" class="headerlink" title="root，备份欧版recovery"></a>root，备份欧版recovery</h1><p>fastboot boot TWRP.img<br>临时进入twrp，可以手机操作切换到中文<br>格式化分区<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223161714.png"><br>会出现红字 不用理</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223161820.png"></p><p>再清除 cache</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223162004.png"><br>也会出现红字，点击返回，点击重启bootloader</p><p>fastboot boot TWRP.img<br>再次进入twrp，电脑上可以显示手机存储了。把拷贝内存文件夹里面的三个文件复制粘贴到手机里面<br>依次刷入这三个文件，顺序不能乱，这次刷入没有出现红字。<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223162654.png"></p><p>接着备份欧版官方的recocery</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223162928.png"></p><p>备份好后，复制到电脑，重启手机到bootloader<br>输入<br>fastboot flash recovery TWRP.img<br>再次输入<br>fastboot boot TWRP.img<br>电脑上就可以看到手机储存了</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223163401.png"><br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223163523.png"></p><p>把里面的twrp文件夹复制到电脑，然后手机关机</p><h1 id="刷回韩版系统"><a href="#刷回韩版系统" class="headerlink" title="刷回韩版系统"></a>刷回韩版系统</h1><p>关机状态下，按住音量加 插入USB，就会进入刷机模式<br>右键点击LGUP，以管理员身份运行。</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223163954.png"></p><p>刷韩版的kdz系统<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223164216.png"></p><p>选分区的时候排除recovery，recoverybak两个分区，也就是不刷入官方recovery，因为韩版系统即使解锁bootloader也无法进入fastboot，也就无法刷入TWRP</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223164329.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223164450.png"></p><p>刷完，一般会进入TWRP，如果没有进去，就要从 混刷 h930的kdz 开始重新刷</p><p>刷完韩版系统，进入TWRP后<br>格式化data，再清除 cache，依次刷入<br>1_Magisk-v16.0<br>2_no-verity-opt-encrypt-6.0<br>3_lg-rctd-disabler-1.0(1)adb shell<br>刷完后把之前备份复制到电脑的欧版recocery，（带备份日期和时间的这个文件夹）复制到手机，从TWRP恢复。</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223174444.png"></p><p>恢复之后关机再开机，一般可以正常进系统，如果等10分钟还不能开机，就要重新执行工厂格式化开机</p><p>按住音量减和电源键 8秒以上，会闪屏一下，当LOGO出现后，立刻松开，再重新按住关机键，直到出现data peset界面，才松开。用音量键选择YES，按电源键 进入恢复出厂设置<br>按照前面的教程，并引用了之前的图片<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223133708.png"></p><p>开始硬格手机，格式完毕后，就可以进入系统<br>现在的系统状态是已解锁BL锁，有root权限<br>把TWEP.img文件复制到手机储存<br>打开开发者模式，开启adb调试<br>输入下面的命令<br>adb shell<br>su</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223175719.png"></p><p>手机点允许</p><p>dd if=/sdcard/TWRP.img of=/dev/block/bootdevice/by-name/recovery</p><h1 id="教程补充"><a href="#教程补充" class="headerlink" title="教程补充"></a>教程补充</h1><p>刷机前可以先备份基带再刷机</p><p>手机进入刷机模式（完全关机按住音量+插入数据线连接电脑）</p><p>右键管理员打开桌面“LG UP”。</p><p>先备份基带（备份xbl xbl2 modem分区） （机锋论坛浪大教程）</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223185115.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223185236.png"></p><p>以后要升级系统，可以从刷回韩版教程开始刷</p><p>在ADB和Fastboot工具的文件夹中，按住shift并右击空白处，选择“在此处打开Powershell窗口”（旧版Windows为命令提示符）<br>界面不同，但命令无区别）,进入命令行窗口。</p><h1 id="机锋精品教程"><a href="#机锋精品教程" class="headerlink" title="机锋精品教程"></a>机锋精品教程</h1><p> LG V30韩版解锁Bootloader+TWRP+韩版系统+root详细教程&amp;资源  （非常详细的刷机教程）<br> <a href="http://bbs.gfan.com/android-9493762-1-4.html">http://bbs.gfan.com/android-9493762-1-4.html</a></p><p>LG V30官方KDZ混刷教程<br><a href="http://bbs.gfan.com/android-9313407-1-1.html">http://bbs.gfan.com/android-9313407-1-1.html</a></p><p> LG V30解BL 安装TWRP及root详细教程<br> ttp://bbs.gfan.com/android-9313266-1-1.html</p><p>韩版刷机说明..防砖.刷第三方<br><a href="http://bbs.gfan.com/android-9561523-1-1.html">http://bbs.gfan.com/android-9561523-1-1.html</a></p><p> 韩版v300l，解锁+root+原生系统教程之五大步（补充）<br> <a href="http://bbs.gfan.com/android-9506755-1-1.html">http://bbs.gfan.com/android-9506755-1-1.html</a></p><p>LG V30目前可以通刷的版本说明<br><a href="http://bbs.gfan.com/android-9310017-1-3.html">http://bbs.gfan.com/android-9310017-1-3.html</a></p><p>【PIE+Volte】韩版移动电信成功开启Volte更新详细教程<br><a href="http://bbs.gfan.com/android-9618911-1-3.html">http://bbs.gfan.com/android-9618911-1-3.html</a></p><p>韩版用户折腾经验分享<br><a href="http://bbs.gfan.com/android-9492238-1-6.html">http://bbs.gfan.com/android-9492238-1-6.html</a></p><p>俄罗斯论坛LG V30刷机固件下载<br><a href="http://4pda.ru/forum/index.php?showtopic=902834">http://4pda.ru/forum/index.php?showtopic=902834</a></p><p>看下载量 Dot OS 这个不错 也是官方的，比较稳定，其他rom应该也不错的。<br>8.1<br><a href="https://forum.xda-developers.com/lg-v30/development/rom-dotos-v2-2-t37984419.0">https://forum.xda-developers.com/lg-v30/development/rom-dotos-v2-2-t37984419.0</a></p><p>9.0<br><a href="https://forum.xda-developers.com/lg-v30/development/rom-pie-dot-os-3-0-t3908490">https://forum.xda-developers.com/lg-v30/development/rom-pie-dot-os-3-0-t3908490</a></p><p>LG-US998 20D ROM 常用底包 里面有解锁的相关链接<br><a href="https://forum.xda-developers.com/lg-v30/development/rom-lg-us998-20d-rom-t3830318">https://forum.xda-developers.com/lg-v30/development/rom-lg-us998-20d-rom-t3830318</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓手机</category>
      
      <category>LG V30</category>
      
      <category>刷机</category>
      
      <category>root</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓手机</tag>
      
      <tag>LG V30</tag>
      
      <tag>刷机</tag>
      
      <tag>root</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决安卓手机卡顿 安装google商店官方软件的方法</title>
    <link href="/posts/17.html"/>
    <url>/posts/17.html</url>
    
    <content type="html"><![CDATA[<p>下载play.google.com商店软件的方法<br>国内安卓软件多数都是比较流氓，内存占用大，弹广告，要想手机流畅运行，建议尽量使用google商店下载的软件。</p><p>下面提到的所以资源可以到蓝奏云网盘下载，无广告，速度飞快</p><span id="more"></span><p><a href="https://www.lanzous.com/b059xemze">https://www.lanzous.com/b059xemze</a></p><h1 id="下载国际版安卓软件最简单的方法"><a href="#下载国际版安卓软件最简单的方法" class="headerlink" title="下载国际版安卓软件最简单的方法"></a>下载国际版安卓软件最简单的方法</h1><h2 id="下载setupvpn-4-6-2-apk-安装好，注册，登陆，切换外郭ip"><a href="#下载setupvpn-4-6-2-apk-安装好，注册，登陆，切换外郭ip" class="headerlink" title="下载setupvpn_4.6.2.apk 安装好，注册，登陆，切换外郭ip"></a>下载setupvpn_4.6.2.apk 安装好，注册，登陆，切换外郭ip</h2><h2 id="下载-APKPure-v3-15-1-apkpure-com-apk-安装"><a href="#下载-APKPure-v3-15-1-apkpure-com-apk-安装" class="headerlink" title="下载 APKPure_v3.15.1_apkpure.com.apk  安装"></a>下载 APKPure_v3.15.1_apkpure.com.apk  安装</h2><p>就可以在APKPure中下载到国际版的软件，值得一提的是，所以软件都有历史版本下载，特别要提的是微信，新版的非常卡顿，老版的又不给登陆。</p><h1 id="下面介绍几个可以登陆旧版本微信的方法给大家。"><a href="#下面介绍几个可以登陆旧版本微信的方法给大家。" class="headerlink" title="下面介绍几个可以登陆旧版本微信的方法给大家。"></a>下面介绍几个可以登陆旧版本微信的方法给大家。</h1><h2 id="方法一、安装新版的微信（国际版），正常登陆"><a href="#方法一、安装新版的微信（国际版），正常登陆" class="headerlink" title="方法一、安装新版的微信（国际版），正常登陆"></a>方法一、安装新版的微信（国际版），正常登陆</h2><h3 id="下载-Terminal-Emulator-for-Android-97ef8922-apk-安装-这个是安卓手机的终端模拟器"><a href="#下载-Terminal-Emulator-for-Android-97ef8922-apk-安装-这个是安卓手机的终端模拟器" class="headerlink" title="下载 Terminal_Emulator_for_Android_97ef8922.apk 安装  这个是安卓手机的终端模拟器"></a>下载 Terminal_Emulator_for_Android_97ef8922.apk 安装  这个是安卓手机的终端模拟器</h3><p>输入   su<br>输入   pm uninstall -k com.tencent.mm</p><p>下载微信6.5.23（国际版）很多网友反映6.6微信开始卡顿，所以我选择6.5的最后一个版本，直接安装旧版本的微信，安装成功后，微信会提示错误，重新登陆就可以了。</p><h3 id="电脑有安装adb的朋友，可以电脑连接手机，adb依次输入下面的命令"><a href="#电脑有安装adb的朋友，可以电脑连接手机，adb依次输入下面的命令" class="headerlink" title="电脑有安装adb的朋友，可以电脑连接手机，adb依次输入下面的命令"></a>电脑有安装adb的朋友，可以电脑连接手机，adb依次输入下面的命令</h3><p>adb shell<br>su<br>pm uninstall -k com.tencent.mm</p><p>下载微信6.5.23（国际版）很多网友反映6.6微信开始卡顿，所以我选择6.5的最后一个版本，直接安装旧版本的微信，安装成功后，微信会提示错误，重新登陆就可以了。</p><h2 id="方法二、下载安装核心破解，禁用签名认证…随意升降级安装"><a href="#方法二、下载安装核心破解，禁用签名认证…随意升降级安装" class="headerlink" title="方法二、下载安装核心破解，禁用签名认证…随意升降级安装"></a>方法二、下载安装核心破解，禁用签名认证…随意升降级安装</h2><h2 id="方法三、装上微信最新国际版本-登陆，用钛备份备份-卸载微信-再装上老版本-再用钛备份还原date-启动微信的时候再重新要求输入密码-这样就成了"><a href="#方法三、装上微信最新国际版本-登陆，用钛备份备份-卸载微信-再装上老版本-再用钛备份还原date-启动微信的时候再重新要求输入密码-这样就成了" class="headerlink" title="方法三、装上微信最新国际版本,登陆，用钛备份备份.卸载微信,再装上老版本,再用钛备份还原date.启动微信的时候再重新要求输入密码,这样就成了"></a>方法三、装上微信最新国际版本,登陆，用钛备份备份.卸载微信,再装上老版本,再用钛备份还原date.启动微信的时候再重新要求输入密码,这样就成了</h2><h1 id="新增几个直接下载谷歌商店软件的网站"><a href="#新增几个直接下载谷歌商店软件的网站" class="headerlink" title="新增几个直接下载谷歌商店软件的网站"></a>新增几个直接下载谷歌商店软件的网站</h1><p><a href="https://apkcombo.com/zh-cn">https://apkcombo.com/zh-cn</a></p><p><a href="https://apkdl.in/">https://apkdl.in/</a></p><p><a href="https://www.apkturbo.com/">https://www.apkturbo.com/</a></p><p><a href="https://www.ourplay.net/">https://www.ourplay.net/</a></p><h1 id="以下资源暂时失效"><a href="#以下资源暂时失效" class="headerlink" title="以下资源暂时失效"></a>以下资源暂时失效</h1><p>下面我做一个教程教大家下载google商店的软件。<br>下载chrome 谷歌浏览器，这个百度一下就有的。<br>下载谷歌助手，访问谷歌商店需要这个<br><a href="https://www.lanzous.com/b059xemze">https://www.lanzous.com/b059xemze</a></p><p>点击谷歌浏览器右上角的三个小点，点更多工具，点扩展程序，点右上角的开发者模式，将下载的google助手拖进浏览器，点击打开google 助手的开关</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223114314.png"></p><p>这个个时候，我们就可以访问谷歌商店了<br><a href="https://play.google.com/">https://play.google.com/</a><br>安装下载软件的插件 APK Downloader<br><a href="https://chrome.google.com/webstore/search/%20APK%20Downloader?hl=zh-CN">https://chrome.google.com/webstore/search/%20APK%20Downloader?hl=zh-CN</a><br>第一个就是，点击添加至chrome<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223114517.png"></p><p>以下载支付宝为例</p><p>在<a href="https://play.google.com/">https://play.google.com/</a> 搜索支付宝<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223114641.png"><br>复制地址栏的地址<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223114746.png"><br>打开APK Downloader<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223115247.png"><br>将刚刚复制的支付宝的地址粘贴到这里<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223115404.png"><br>点击generate download link</p><p>会出现一个二维码，大家可以用手机扫这个二维码<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191223115650.png"><br>扫描后会一般会出现三个版本信息，一般建议用最新版的</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/681577073583_.pic.jpg"></p><p>点击 10.1.84.474.apk，就可以下载的。<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/691577073585_.pic.jpg"></p><p>为了方便大家，我把一些常用的软件下载的二维码贴出来，直接扫描二维码就可以下载的</p><p>微信<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/%E5%BE%AE%E4%BF%A1.png"></p><p>支付宝</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/zfb.png"></p><p>淘宝<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/taobao.png"></p><p>咸鱼</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/xianyu.png"></p><p>京东</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/jd.png"></p><p>微博</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/weibo.png"></p><p>什么值得买</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/smzdm.png"></p><p>via浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/via.png"></p><p>kiwi 浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/kiwi.png"></p><p>yandex 浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/Yandex.png"></p><p>eage浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/eage.png"></p><p>火狐浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/fiefox.png"></p><p>qq</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/qq2.png"></p><p>微云</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/weiyun.png"></p><p>OneDrive</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/OneDrive2.png"></p><p>mega网盘</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/mega.png"></p><p>有道云</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/youdaoyun.png"></p><p>今日头条</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/toutiao.png"></p><p>老王</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/laowangvpn.png"></p><p>高德地图</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/gaodeditu.png"></p><p>百度地图</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/baiduditu.png"></p><p>携程</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/xiecheng.png"></p><p>去哪儿</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/qunaer.png"></p>]]></content>
    
    
    <categories>
      
      <category>安卓手机</category>
      
      <category>安卓软件</category>
      
      <category>APK Downloader</category>
      
      <category>cheome插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓手机</tag>
      
      <tag>安卓软件</tag>
      
      <tag>APK Downloader</tag>
      
      <tag>cheome插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果给安卓手机刷入twrp recovery教程</title>
    <link href="/posts/16.html"/>
    <url>/posts/16.html</url>
    
    <content type="html"><![CDATA[<h1 id="手机设置"><a href="#手机设置" class="headerlink" title="手机设置"></a>手机设置</h1><p>点击设置，系统，关机手机，版本号联系点击三下，进入开发者模式，找到开发者选项，打开OME解锁，打开Android调试，打开网络ADB调试。</p><span id="more"></span><h1 id="下载twrp"><a href="#下载twrp" class="headerlink" title="下载twrp"></a>下载twrp</h1><p> 下面以lgnexus5x为例<br> <a href="https://twrp.me/lg/lgnexus5x.html">https://twrp.me/lg/lgnexus5x.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191218000645.png"></p><p>下载最新的<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191218000719.png"></p><h1 id="安装-ADB-和-Fastboot-工具"><a href="#安装-ADB-和-Fastboot-工具" class="headerlink" title="安装 ADB 和 Fastboot 工具"></a>安装 ADB 和 Fastboot 工具</h1><p>点击下载platform-tools<br><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">https://dl.google.com/android/repository/platform-tools-latest-darwin.zip</a><br>解压后放在一个方便使用的位置，英文名字的文件夹<br>打开终端，用 cd 命令进入 SDK 目录的 platform-tools 文件夹。即 输入 cd 和一个空格，后面输入文件夹路径，也可以直接拖拽文件夹进终端。下面是我的路径存放地址示例：<br>cd ~/desktop/az/platform-tools</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191218001247.png"></p><p>文件夹路径可以直接使用快捷键win+ alt + C来复制，粘贴当然还是`win + V</p><p>把 ADB 拷贝到系统，回车后继续输入你的密码。密码是隐藏的，输入完毕，回车就行<br>sudo cp adb /usr/bin/adb<br>把 Fastboot 也复制进来<br>sudo cp fastboot /usr/bin/fastboot</p><h1 id="刷入第三方-Recovery-（以-TWRP-为例）"><a href="#刷入第三方-Recovery-（以-TWRP-为例）" class="headerlink" title="刷入第三方 Recovery （以 TWRP 为例）"></a>刷入第三方 Recovery （以 TWRP 为例）</h1><p>手机关机，按住音量减号键+开机键 进入bootloader刷机模式，（或者在终端输入adb reboot bootloader）<br>手机用USB线连接电脑（尽量用原装线，台式机尽量插机箱后面的USB接口）<br>cd ~/desktop/az/platform-tools    （这个是我的platform-tools存放的路径，你可以自己设置的哈）<br>有两个方法可以刷入的</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>输入 fastboot flash recovery<br>把recovery文件img结尾的拖入命令后，留意空格哈<br>如果无法刷入recovery，建议使用这个命令sudo fastboot flash recovery<br>这个刷好recovery无法自动重启，可以长按关机键关机，再安装音量加+开机键十秒左右，一般就会进入recovery<br>实在没有进入，可以手机开机，输入命令 adb reboot recovery</p><p>把下载好的文件twrp文件放到platform-tools 并重新命名为twrp.img</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>把下载好的文件twrp文件放到platform-tools 并重新命名为twrp.img<br>输入 fastboot flash recovery twrp.img<br>再输入命令<br>fastboot boot twrp.img<br>正常手机就会重启到recovery 模式了，就可以进入里面刷机了。</p><h1 id="终端相关的命令解释"><a href="#终端相关的命令解释" class="headerlink" title="终端相关的命令解释"></a>终端相关的命令解释</h1><p>adb reboot bootloader<br>进入手机刷机模式bootloader</p><p>adb reboot recovery<br>进入手机恢复模式recovery</p><p>adb reboot system<br>进入手机系统</p>]]></content>
    
    
    <categories>
      
      <category>安卓手机</category>
      
      <category>twrp</category>
      
      <category>recovery</category>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓手机</tag>
      
      <tag>twrp</tag>
      
      <tag>recovery</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支付宝通过三星健康修改步数的教程和注意事项</title>
    <link href="/posts/15.html"/>
    <url>/posts/15.html</url>
    
    <content type="html"><![CDATA[<h2 id="支付宝通过三星健康修改步数的教程和注意事项"><a href="#支付宝通过三星健康修改步数的教程和注意事项" class="headerlink" title="支付宝通过三星健康修改步数的教程和注意事项"></a>支付宝通过三星健康修改步数的教程和注意事项</h2><p>全部软件下载地址（担心以后新版的支付宝不能同步，所以在网盘也放了最近的三个支付宝，酷安下载的）<br><a href="https://www.lanzous.com/b059xem4d">https://www.lanzous.com/b059xem4d</a></p><span id="more"></span><h1 id="安卓8，安卓9，安卓10安装edxposed"><a href="#安卓8，安卓9，安卓10安装edxposed" class="headerlink" title="安卓8，安卓9，安卓10安装edxposed"></a>安卓8，安卓9，安卓10安装edxposed</h1><p>下载MagiskManager-v7.4.0.apk<br>下载Magisk-v20.1.zip<br>下载应用变量旧版本 com.sollyu.xposed.hook.model-3.2.10.ef7885b-0-13665-841308-coolapk.apk<br>下载三星步数管理.apk<br>下载三星健康.apk</p><p>在twrp刷入Magisk-v20.1.zip<br>手机开机<br>安装Magisk Manager v7.4<br>在magisk中安装好riru-core，再安装riru edxposed<br>在酷安下载安装edxposed installer<br>安装支付宝，安装三星步数管理.apk，安装下载三星健康.apk<br>打开edxposed  在模块中勾选应用变量 3.2.10.ef78856<br>重启手机</p><h1 id="安卓6，安卓7安装xposed"><a href="#安卓6，安卓7安装xposed" class="headerlink" title="安卓6，安卓7安装xposed"></a>安卓6，安卓7安装xposed</h1><p>下载MagiskManager-v7.4.0.apk<br>下载Magisk-v20.1.zip<br>下载XposedInstaller_3.1.5-Magisk.apk<br>下载应用变量旧版本 com.sollyu.xposed.hook.model-3.2.10.ef7885b-0-13665-841308-coolapk.apk<br>下载三星步数管理.apk<br>下载三星健康.apk在twrp刷入Magisk-v20.1.zip<br>手机开机<br>安装Magisk Manager v7.4<br>在magisk中安装xposed framework<br>手机开机安装XposedInstaller_3.1.5-Magisk.apk<br>打开xposed  在模块中勾选应用变量 3.2.10.ef78856<br>重启手机</p><h1 id="下面开始软件设置"><a href="#下面开始软件设置" class="headerlink" title="下面开始软件设置"></a>下面开始软件设置</h1><h2 id="打开应用变量"><a href="#打开应用变量" class="headerlink" title="打开应用变量"></a>打开应用变量</h2><p>点击支付宝<br>手机厂商选择samsung<br>手机型号选择Galaxy S8<br>手机序号选择随机<br>手机版本随便选一个<br>其他的不用填<br>点击三星健康<br>手机厂商选择samsung<br>手机型号选择Galaxy S8<br>手机序号选择随机<br>手机版本随便选一个</p><h2 id="打开三星健康"><a href="#打开三星健康" class="headerlink" title="打开三星健康"></a>打开三星健康</h2><p>点击右上角的三角点，点击设置，点击关于三星健康在版本号那里点击10次以上，进如开发者模式，前面会出现（Developer Mode）<br>点击数据权限，点击支付宝，里面的全打开，点击三星健康步数管理，里面的全打开<br>如果找不到支付宝或者三星健康步数管理，需先打开支付宝和三星健康步数管理，再打开三星健康，就可以看到了。</p><h2 id="打开三星健康步数管理"><a href="#打开三星健康步数管理" class="headerlink" title="打开三星健康步数管理"></a>打开三星健康步数管理</h2><p>点右上角的三个小点，点连接到三星健康<br>点右下角的+号，可以自定义加多少步</p><h2 id="打开支付宝"><a href="#打开支付宝" class="headerlink" title="打开支付宝"></a>打开支付宝</h2><p>点击运动，点右上角上小点，点设置点击记录运动数据，选择三星健康，就可以了。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>第一次同步很快，后面同步数据大概要十几二十分钟。<br>加速要快，我一般连续点两次加1万步，再点一个自定义几十步，整数不好看。<br>当天加步要在下午四点前完成，下午四点后加的步会自动加到第二天。<br>网友反映经常会有步数不能同步的问题，经过很多次试验，终于找到解决这个问题的方法，担心流传开会失效，暂时不公开，有需要理解的朋友可以加我微信咨询。</p>]]></content>
    
    
    <categories>
      
      <category>支付宝运动</category>
      
      <category>三星健康</category>
      
      <category>xposed</category>
      
      <category>edxposed</category>
      
    </categories>
    
    
    <tags>
      
      <tag>edxposed</tag>
      
      <tag>支付宝运动</tag>
      
      <tag>三星健康</tag>
      
      <tag>xposed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小白电脑安装windows系统，linxu和黑苹果的相关资料</title>
    <link href="/posts/14.html"/>
    <url>/posts/14.html</url>
    
    <content type="html"><![CDATA[<p>电脑安装系统必备<br>操作系统下载<br>官方系统</p><span id="more"></span><p><a href="http://msdn.itellyou.cn/">http://msdn.itellyou.cn/</a><br><a href="https://tb.rg-adguard.net/public.php">https://tb.rg-adguard.net/public.php</a>  </p><p>第三方系统<br><a href="http://twm000.top/">http://twm000.top/</a><br><a href="http://www.uqi.me/">http://www.uqi.me/</a><br><a href="https://icura.cn/">https://icura.cn/</a><br>PE<br><a href="http://www.wepe.com.cn/">http://www.wepe.com.cn/</a><br><a href="https://www.itsk.com/topic-software.html">https://www.itsk.com/topic-software.html</a><br><a href="http://www.myfeng.cn/">http://www.myfeng.cn/</a><br>驱动<br><a href="https://www.sysceo.com/">https://www.sysceo.com/</a><br><a href="https://www.160.com/">https://www.160.com/</a><br><a href="http://www.drivergenius.com/">http://www.drivergenius.com/</a><br><a href="http://weishi.360.cn/qudongdashi/index.html">http://weishi.360.cn/qudongdashi/index.html</a><br><a href="https://www.ludashi.com/">https://www.ludashi.com/</a><br>系统激活<br><a href="http://twm000.ys168.com/">http://twm000.ys168.com/</a>  </p><p>精品软件下载<br><a href="https://www.landiannews.com/">https://www.landiannews.com/</a><br><a href="https://www.appcgn.com/">https://www.appcgn.com/</a><br><a href="https://www.repaik.com/">https://www.repaik.com/</a><br><a href="http://www.carrotchou.blog/">http://www.carrotchou.blog/</a><br><a href="https://www.ccava.net/">https://www.ccava.net/</a><br><a href="https://www.luochenzhimu.com/">https://www.luochenzhimu.com/</a><br><a href="https://hrtsea.com/">https://hrtsea.com/</a></p><p>国产杀毒推荐<br><a href="https://www.huorong.cn/">https://www.huorong.cn/</a><br><a href="https://www.wisevector.com/">https://www.wisevector.com/</a><br>杀毒论坛推荐<br><a href="https://bbs.kafan.cn/">https://bbs.kafan.cn/</a></p><p>黑苹果教程网站<br><a href="http://bbs.pcbeta.com/">http://bbs.pcbeta.com/</a><br><a href="https://blog.daliansky.net/">https://blog.daliansky.net/</a><br><a href="https://www.tonymacx86.com/">https://www.tonymacx86.com/</a><br><a href="http://www.insanelymac.com/">http://www.insanelymac.com/</a><br><a href="https://osxlatitude.com/">https://osxlatitude.com/</a>  </p><p>mac软件下载<br> <a href="http://www.pc6.com/mac/soft/">http://www.pc6.com/mac/soft/</a><br> <a href="https://www.macbl.com/">https://www.macbl.com/</a><br> <a href="https://www.macdo.cn/">https://www.macdo.cn/</a></p><p>linxu<br><a href="https://www.deepin.org/">https://www.deepin.org/</a><br><a href="https://ubuntu.com/download">https://ubuntu.com/download</a><br><a href="https://www.debian.org/">https://www.debian.org</a><br><a href="https://www.manjaro.cn/153">https://www.manjaro.cn/153</a><br><a href="https://bbs.archlinuxcn.org/">https://bbs.archlinuxcn.org/</a><br><a href="https://lubuntu.net/">https://lubuntu.net/</a><br><a href="https://elementaryos.cn/">https://elementaryos.cn/</a>  </p>]]></content>
    
    
    <categories>
      
      <category>电脑软件</category>
      
      <category>电脑系统</category>
      
      <category>PE</category>
      
      <category>驱动</category>
      
      <category>mac</category>
      
      <category>黑苹果</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
      <tag>linux</tag>
      
      <tag>电脑软件</tag>
      
      <tag>电脑系统</tag>
      
      <tag>PE</tag>
      
      <tag>驱动</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床搭建的最佳选择 PicGo + Github + Jsdelivr免费公用CDN加速.</title>
    <link href="/posts/12.html"/>
    <url>/posts/12.html</url>
    
    <content type="html"><![CDATA[<p><strong>图床搭建的最佳选择 PicGo + Github + Jsdelivr免费公用CDN加速</strong></p><h1 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h1><h2 id="点击-New-repository"><a href="#点击-New-repository" class="headerlink" title="点击 New repository"></a>点击 New repository</h2><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/0.png"></p><h2 id="创建好后，获取Token"><a href="#创建好后，获取Token" class="headerlink" title="创建好后，获取Token"></a>创建好后，获取Token</h2><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/4.png"></p><h2 id="这个Token只出现一次的，一定要记得复制好，pico设置要用到的"><a href="#这个Token只出现一次的，一定要记得复制好，pico设置要用到的" class="headerlink" title="这个Token只出现一次的，一定要记得复制好，pico设置要用到的"></a>这个Token只出现一次的，一定要记得复制好，pico设置要用到的</h2><h1 id="下载picgo"><a href="#下载picgo" class="headerlink" title="下载picgo"></a>下载picgo</h1><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>我使用的是黑苹果，下载PicGo-2.1.2.dmg<br>安装好后，在屏幕右上角会有一个标志，右键打开详细窗口</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/5.png"></p><p>设定仓库名：waimao8/image   （你设置成你自己的哈）<br>分支名一般是master   （默认建议这个）<br>存储的路径：img         （可以不填我没有填）<br>设定自定义域名：可以不填使用默认的，但是Github服务器在外国，访问速度不太理想，我们可以通过Jsdelivr免费公用CDN加速来加速图片是访问速度<br>所以我设置成<br><a href="https://cdn.jsdelivr.net/gh/waimao8/image@master">https://cdn.jsdelivr.net/gh/waimao8/image@master</a></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213175919.png"></p><p>记得点设为默认图床哦！</p><h1 id="顺便介绍下这篇文件的制作过程"><a href="#顺便介绍下这篇文件的制作过程" class="headerlink" title="顺便介绍下这篇文件的制作过程"></a>顺便介绍下这篇文件的制作过程</h1><p>打开 <a href="http://marxi.co/">http://marxi.co/</a><br>登陆微信<br>默认截图的快捷键ctrl+win+A，选择截图后，<br>点击shift+win+p<br>截图会自动通过Picgo上传到Github上面了，直接粘贴到文章就可以了，真的是非常方便！</p><p>笔记本屏幕太小，我外接了显示器，发现点击shift+win+p后，上次图片失败，<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213175553.png">百度了一下相关的教程<br>打开mac的系统偏好设置，点击显示器，点击颜色，选择普通RGB描述文件，就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
      <category>hexo</category>
      
      <category>PicGo</category>
      
      <category>Jsdelivr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Github</tag>
      
      <tag>PicGo</tag>
      
      <tag>Jsdelivr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nexus 5X手机在支付宝的蚂蚁森林自动收能量的过程.</title>
    <link href="/posts/11.html"/>
    <url>/posts/11.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载刷机包"><a href="#下载刷机包" class="headerlink" title="下载刷机包"></a>下载刷机包</h1><p><a href="https://downloads.aospextended.com/bullhead">https://downloads.aospextended.com/bullhead</a></p><p>个人觉得aospextended的rom比较省电，其他刷机包或者不刷机也是可以的，只要是手机不能杀支付宝的后台就行，如果需要用都省电模式，要在省电模式里面排除支付宝。</p><span id="more"></span><h1 id="下载twrp"><a href="#下载twrp" class="headerlink" title="下载twrp"></a>下载twrp</h1><p><a href="https://twrp.me/lg/lgnexus5x.html">https://twrp.me/lg/lgnexus5x.html</a></p><h1 id="下载magisk"><a href="#下载magisk" class="headerlink" title="下载magisk"></a>下载magisk</h1><p><a href="https://t00y.com/file/22940096-413054846">下载MagiskManager-v7.4.0.apk</a></p><p><a href="https://t00y.com/file/22940096-413054839">下载Magisk-v20.1.zip</a><br><a href="https://t00y.com/file/22940096-413054839">https://t00y.com/file/22940096-413054839</a><br>刷入twrp<br>在twrp中四清，刷入aospextended的刷机包<br>在twrp中刷入Magisk-v20.1.zip</p><p>手机开机<br>安装Magisk Manager v7.4<br>在magisk中安装好riru-core，再安装riru edxposed<br>在酷安下载安装edxposed installer </p><!-- more --><h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>下载插件<a href="https://t00y.com/file/22940096-413054804">小鸡炖蘑菇</a><br>或者<a href="https://t00y.com/file/22940096-413054745">XQuickEnergy</a><br>安装后，在edxposed软件中勾选插件，重启手机，打开支付宝，就可以通过上面两个插件设置自动收取能量了，记得，支付宝不可以退出哦！</p><h1 id="下载tasker软件设定自动打开支付宝"><a href="#下载tasker软件设定自动打开支付宝" class="headerlink" title="下载tasker软件设定自动打开支付宝"></a>下载tasker软件设定自动打开支付宝</h1><p>点击任务，新建任务，命名打开支付宝，点+号。点程序，点启动应用，点支付宝。点配置文件，点+号，点时间，点从上午6点到凌晨1点，点每30分钟。点击打开支付宝，就完成了设置，这样即使支付宝后天即使被关闭了，每30分钟也会自动打开一次，时间都是可以自己设置的。十分钟打开一次也可以，一个小时打开一次也行，主要是看支付宝多久会被杀后台。</p>]]></content>
    
    
    <categories>
      
      <category>安卓手机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓手机</tag>
      
      <tag>magisk</tag>
      
      <tag>edxposed</tag>
      
      <tag>XQuickEnergy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度网盘不限速下载的一些方法</title>
    <link href="/posts/10.html"/>
    <url>/posts/10.html</url>
    
    <content type="html"><![CDATA[<h1 id="ENFI"><a href="#ENFI" class="headerlink" title="ENFI"></a>ENFI</h1><p>下载地址 <a href="http://www.enfi.cloud/">http://www.enfi.cloud/</a>  需要搭配enfi下载助手<br>用P2P下载技术，支持HTTP，BT，磁力链等各种协议，高速下载让你摆脱限速的困扰，从此告别低速<br>这个可以挂机赚钱的，本人测试黑苹果笔记本戴尔E6430用的无线wifi2.4的网络，50M的东莞联通宽带，显示当前网络能力25.2M，估计一天收入预计4388积分，一元可以买10000积分。一积分可以加速1M的下载，加速测试下载速度在每秒6M左右，还是不错的。<br>具体收益大小还和上传带宽大小有关，比如上传带宽是65.98Mbps，那么预计一天的收益大概是28800积分（大约是2.9元，1元=10000积分），挂机一天就有50G流量，足够普通人使用一个月了。</p><span id="more"></span><p>教程参考<br><a href="https://www.macdo.cn/23833.html">https://www.macdo.cn/23833.html</a></p><h1 id="百度网盘不限速下载器-BND-下载地址"><a href="#百度网盘不限速下载器-BND-下载地址" class="headerlink" title="百度网盘不限速下载器 BND 下载地址"></a>百度网盘不限速下载器 BND 下载地址</h1><p>利用baiduPCS-Web搭建的，个人下载500M以下使用。速度1M左右，超过500M下载会限速到200K左右，大文件下载不建议使用，下载过程中尽量不要暂停或者停止，可能会导致后面不能下载，如果限速或者不能下载了，请切换自己的其他百度账号使用。<br><a href="https://hacpai.com/article/1563154719934">https://hacpai.com/article/1563154719934</a></p><h1 id="Motrix-全能下载工具"><a href="#Motrix-全能下载工具" class="headerlink" title="Motrix 全能下载工具"></a>Motrix 全能下载工具</h1><p>Motrix 是一款开源免费且界面非常清爽简约的全能型下载软件，它跨平台支持 Windows、Mac、Linux 三大系统，可以支持下载 HTTP、FTP、BT、磁力链接以及下载百度网盘等资源</p><p>个人使用，下载速度在每秒130K左右，速度不快，可以续传，个人感觉比百度网盘客户端好用些</p><p>教程参考 <a href="https://www.macdo.cn/21811.html">https://www.macdo.cn/21811.html</a></p><h1 id="Aria2百度云加速下载器"><a href="#Aria2百度云加速下载器" class="headerlink" title="Aria2百度云加速下载器"></a>Aria2百度云加速下载器</h1><h2 id="下载Aria2GUI客户端"><a href="#下载Aria2GUI客户端" class="headerlink" title="下载Aria2GUI客户端"></a>下载Aria2GUI客户端</h2><p>地址：<a href="https://github.com/yangshun1029/aria2gui/releases#">https://github.com/yangshun1029/aria2gui/releases#</a> BaiduPCS-Web</p><h2 id="下载chrome插件：网盘助手，这里记得整个文件都要保存下来"><a href="#下载chrome插件：网盘助手，这里记得整个文件都要保存下来" class="headerlink" title="下载chrome插件：网盘助手，这里记得整个文件都要保存下来"></a>下载chrome插件：网盘助手，这里记得整个文件都要保存下来</h2><p>地址：<a href="https://github.com/acgotaku/BaiduExporter#">https://github.com/acgotaku/BaiduExporter#</a> </p><h2 id="浏览器上安装插件："><a href="#浏览器上安装插件：" class="headerlink" title="浏览器上安装插件："></a>浏览器上安装插件：</h2><p>把下载下来的BaiduExporter.crx文件拖拽到chrome的扩展程序里面。<br>百度网盘文件下载时，使用Chrome打开百度网盘，选择文件，点击导出下载 ，导出下载前需要先打开 Aria2 ，选择 ARIA2 RPC 即可</p><h1 id="百度网盘直链下载助手"><a href="#百度网盘直链下载助手" class="headerlink" title="百度网盘直链下载助手"></a>百度网盘直链下载助手</h1><p>软件下载地址<br><a href="https://545c.com/dir/3994041-35240665-e1ea37">https://545c.com/dir/3994041-35240665-e1ea37</a></p><h1 id="其他插件有时行有时不行，比如下面的几款，大家可以去尝试"><a href="#其他插件有时行有时不行，比如下面的几款，大家可以去尝试" class="headerlink" title="其他插件有时行有时不行，比如下面的几款，大家可以去尝试"></a>其他插件有时行有时不行，比如下面的几款，大家可以去尝试</h1><h2 id="BaiduPCS-Web"><a href="#BaiduPCS-Web" class="headerlink" title="BaiduPCS-Web"></a>BaiduPCS-Web</h2><h2 id="Proxyee-Down"><a href="#Proxyee-Down" class="headerlink" title="Proxyee Down"></a>Proxyee Down</h2>]]></content>
    
    
    <categories>
      
      <category>电脑软件</category>
      
      <category>百度网盘下载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电脑软件</tag>
      
      <tag>百度网盘下载</tag>
      
      <tag>it软件</tag>
      
      <tag>百度网盘下载不限速</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>戴尔笔记本E6430安装黑苹果的全部过程</title>
    <link href="/posts/9.html"/>
    <url>/posts/9.html</url>
    
    <content type="html"><![CDATA[<h1 id="寻找EFI文件"><a href="#寻找EFI文件" class="headerlink" title="寻找EFI文件"></a>寻找EFI文件</h1><p>   从黑苹果长期维护机型 EFI 及安装教程整理<br>        <a href="https://www.jianshu.com/p/484f07b8c7fd">https://www.jianshu.com/p/484f07b8c7fd</a><br>        找到  <a href="https://github.com/kinoute/Hack-Dell-Latitude-E6430">https://github.com/kinoute/Hack-Dell-Latitude-E6430</a> 下载EFI文件夹<br>        <span id="more"></span></p><h1 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h1><p>从黑果小兵下载macOS Mojave 10.14.6，自带Clover的<br><a href="https://blog.daliansky.net/macOS-Mojave-10.14.6-18G87-Release-version-with-Clover-5033-original-image.html">https://blog.daliansky.net/macOS-Mojave-10.14.6-18G87-Release-version-with-Clover-5033-original-image.html</a></p><h1 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h1><p>下载etcher软件，<a href="https://www.balena.io/etcher">https://www.balena.io/etcher</a> 选择U盘，点击Flash即可。（10分钟左右）<br>      也可以用TransMac制作启动盘（比较麻烦），用管理员权限打开，在软件的左侧找到自己的U盘，然后右键 ，选择Formar Disk for Mac意思是将U盘格式化为Mac格式，然后右键选择Restore with Disk Image来将准备的dmg镜像写入到U盘中（要30分钟左右）</p><h1 id="替换EFI文件"><a href="#替换EFI文件" class="headerlink" title="替换EFI文件"></a>替换EFI文件</h1><p>​    拔下U盘重新插上，会发现有一个EFI文件夹，将里面的文件删除，把下载好的适合自己机型的EFI文件复制进去就可以了，如果找不到EFI文件夹，可以用DiskGenius读取，并强制删除里面的EFI文件，Ctrl+V粘贴自己的EFI文件夹  </p><h1 id="设置bios"><a href="#设置bios" class="headerlink" title="设置bios"></a>设置bios</h1><p>   拥有正确的BIOS版本后，请使用F12启动时的密钥进入BIOS 。单击“加载默认值”，然后将SATAOperations设置为AHCI，将Boot List Option设置为UEFI并禁用Secure Boot</p><h1 id="安装mac"><a href="#安装mac" class="headerlink" title="安装mac"></a>安装mac</h1><p>   参考 <a href="https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html">https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html</a></p><p>启动U盘插入电脑，开机按F12，选择USB启动安装程序，选择macOS Install、选择磁盘工具，点击左侧，切换到显示所有设备，然后找到我们要安装系统的硬盘，点击抹掉，名称随便写，格式选mac os扩展（日志式），方案选择GUID 分区图，点击抹掉。<br>安装Mac OS ，提示:应用程序副本不能验证 它在下载过程中可能已遭破坏或篡改<br>先关闭电脑的网络, 如关闭右上角的WIFI或者拔掉网线 然后在终端里面修改时间<br>请完全复制下面代码，按回车键确认:<br>date 122014102015.30<br>输入上面的代码按回车后返回的是 Sun Dec 20 14:10:30 PST 2015<br>其他就都简单了，都是中文的，第一次走完进度条后，会自动重启一次，整个安装过程大概20来分钟。<br>安装完成后，每次启动都是要从U盘启动的，要想设置成从电脑启动。我们需要下面的操作。</p><h1 id="将U盘内的EFI文件复制到电脑"><a href="#将U盘内的EFI文件复制到电脑" class="headerlink" title="将U盘内的EFI文件复制到电脑"></a>将U盘内的EFI文件复制到电脑</h1><p>查看磁盘分区表<br>diskutil list<br>挂载磁盘EFI分区<br>sudo diskutil mount disk0s1<br>挂载U盘EFI分区<br>sudo diskutil mount disk2s1<br>打开Finder，注意后面有个.<br>open .<br>电脑上会显示U盘和硬盘的EFI文件夹，将U盘的EFI文件复制到硬盘的EFI文件夹就可以拔掉U盘启动mac了</p>]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
      <tag>lnmp</tag>
      
      <tag>Mac</tag>
      
      <tag>戴尔E6430</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N1安装omv后安装docker+transmission+lnmp搭建网站</title>
    <link href="/posts/8.html"/>
    <url>/posts/8.html</url>
    
    <content type="html"><![CDATA[<p>N1安装好omv后，<br>进入系统，常规设置，修改web管理员密码，需要安装的lnmp搭建网站的话，还需要修改端口，自动登出时间可以设置为1天。<br>进入磁盘，文件管理，挂着ext4格式的U盘或者硬盘（其他格式的不能修改权限比如777 755等）</p><span id="more"></span><p>进入共享文件夹，设置共享，设置ftp nfs smb 等<br>进入omv-extars，打开docker ce<br>进入插件安装transmissionbt ，webdav docker<br>启动容器，设置路径数据盘，避免8G内存不够用</p><p>安装transmission-web 看官方的教程</p><p><a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN">https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN</a></p><p>安装最新发布版本</p><!-- more --><p>docker安装portainer</p><blockquote><p>docker run -d -p 9888:9000 <br>–restart=always <br>-v /var/run/docker.sock:/var/run/docker.sock <br>–name prtainer-test <br>docker.io/portainer/portainer</p></blockquote><p>docker run -d -p 9888:9000 –restart=always –name portainer -v /var/run/docker.sock:/var/run/docker.sock -v /Users/lee/dev/docker_file/portainer/data:/data docker.io/portainer/portainer<br>安装lnmp（我试过通过docker安装deibian后安装lnmp和宝塔，omv是改过端口的，安装后omv还是打不开，所以我选择直接安装）<br>宝塔会占内存，经常安装出错，所以我选择安装lnmp无人值守安装<br><a href="https://lnmp.org/auto.html">https://lnmp.org/auto.html</a> 选择版本<br>无人值守安装命令：<br>wget <a href="http://soft.vpser.net/lnmp/lnmp1.6.tar.gz">http://soft.vpser.net/lnmp/lnmp1.6.tar.gz</a> -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; LNMP_Auto=”y” DBSelect=”3” DB_Root_Password=”lnmp.org” InstallInnodb=”y” PHPSelect=”8” SelectMalloc=”1” ./install.sh lnmp<br>默认数据库密码是lnmp.org 大家可以先修改<br>一切都是自动的，大概要2个小时，安装好后，打开NI的ip<br>在首页可以看到 查看本地环境: 探针 phpinfo phpMyAdmin<br>再参考<br>LNMP添加、删除虚拟主机及伪静态使用教程<br><a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html">https://lnmp.org/faq/lnmp-vhost-add-howto.html</a><br>安装好后，先停止 nginx<br>lnmp nginx stop<br>移动wwwroot文件夹到数据盘比如我的数据盘目录是/sharedfolders/2t/www<br>mv /home/wwwroot /sharedfolders/2t/www<br>将数据盘的wwwroot印射回/home/wwwroot<br>ln -s /sharedfolders/2t/www/wwwroot /home/wwwroot<br>这样网站的数据就不占N1的空间了，都是在外接的数据盘上面了（必须ext4格式）<br>添加域名后/home/wwwroot/目录回有一个域名的目录，在里面上传php程序安装，（比如我的这个博客typecho）</p><p>下面是lnmp相关的命令<br>添加主机</p><p>lnmp vhost add<br>修改添加的主机的端口<br>/usr/local/nginx/conf/vhost</p><p>重启lnmp start|stop|restart 启动停止重新启动</p><p>lnmp restart<br>lnmp nginx restart</p><p>列出网站(虚拟主机)<br>执行：lnmp vhost list</p><p>删除网站(虚拟主机)<br>执行：lnmp vhost del</p>]]></content>
    
    
    <categories>
      
      <category>斐讯N1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斐讯N1</tag>
      
      <tag>omv</tag>
      
      <tag>docker</tag>
      
      <tag>lnmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>斐讯N1安Armbian安装OMV安装nginx+mysql安装typecho全过程</title>
    <link href="/posts/7.html"/>
    <url>/posts/7.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装armbian"><a href="#安装armbian" class="headerlink" title="安装armbian"></a>安装armbian</h1><p>测试了很多版本的Armbian+omv，OMV经常会报错，改用了XQ7的N1首个支持FullCone Nat的Armbian系统，非常好用<br>下面是链接<br><a href="https://www.right.com.cn/forum/thread-788004-1-1.html">https://www.right.com.cn/forum/thread-788004-1-1.html</a></p><span id="more"></span><p>ROM下载地址：链接：<a href="https://share.weiyun.com/5IsYMcO">https://share.weiyun.com/5IsYMcO</a> 密码：fop0i5<br>需要说明的是img制作成U盘后，不需要替换dtb，不需要更换内核，直接使用就可以，一步到位。</p><p>先把镜像写入U盘，从U盘启动后，从路由器找到N1的ip地址<br>通过Xshell登陆 输入N1的ip 账号root 密码1234<br>第一次进入需要修改密码<br>再写入N1的内置存储，用下面的命令就可以了<br>/boot/create-mbr-linux.sh<br>/root/install.sh<br>写入完成后，断电，拔U盘，插电重启</p><p>切换中国时间<br>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo “Asia/Shanghai” &gt; /etc/timezone</p><p>运行<br>nano /etc/apt/sources.list<br>修改源为国内源<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian">http://mirrors.tuna.tsinghua.edu.cn/debian</a> stretch main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian">http://mirrors.tuna.tsinghua.edu.cn/debian</a> stretch-updates main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian-security">http://mirrors.tuna.tsinghua.edu.cn/debian-security</a> stretch/updates main contrib non-free<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/debian">http://mirrors.tuna.tsinghua.edu.cn/debian</a> stretch-backports main</p><p>或者</p><p>deb <a href="http://mirrors.ustc.edu.cn/debian">http://mirrors.ustc.edu.cn/debian</a> stretch main contrib non-free<br>deb <a href="http://mirrors.ustc.edu.cn/debian">http://mirrors.ustc.edu.cn/debian</a> stretch-updates main contrib non-free<br>deb <a href="http://mirrors.ustc.edu.cn/debian">http://mirrors.ustc.edu.cn/debian</a> stretch-backports main contrib non-free<br>deb <a href="http://mirrors.ustc.edu.cn/debian-security/">http://mirrors.ustc.edu.cn/debian-security/</a> stretch/updates main contrib non-free</p><p>保存后，更新源<br>执行 apt-get update 命令即可更新源<br>执行 apt-get upgrade 更新软件</p><h2 id="做一个补充，切换国内源后安装omv和插件有一定概率会出问题，官方的也是一样，最稳的做法是，外国ip，官方源，稳定，速度又快。"><a href="#做一个补充，切换国内源后安装omv和插件有一定概率会出问题，官方的也是一样，最稳的做法是，外国ip，官方源，稳定，速度又快。" class="headerlink" title="做一个补充，切换国内源后安装omv和插件有一定概率会出问题，官方的也是一样，最稳的做法是，外国ip，官方源，稳定，速度又快。"></a>做一个补充，切换国内源后安装omv和插件有一定概率会出问题，官方的也是一样，最稳的做法是，外国ip，官方源，稳定，速度又快。</h2><h1 id="安装omv"><a href="#安装omv" class="headerlink" title="安装omv"></a>安装omv</h1><p>armbian-config</p><p>选择Software，回车确认 接着选择Softy，回车确认 最后选择OMV，空格勾选，回车确认开始安装</p><p>然后，按tab键，选择OK，回车确认 最后等OMV程序自动安装完成</p><p>依次选择Exit、Cancel，返回命令行<br>至此OMV安装完毕，正常的话，浏览器输入N1 ip或<a href="http://aml/">http://aml/</a> ,会看到OpenMediaVault登陆界面</p><p>此时使用默认用户名：admin 默认密码：openmediavault ，登陆即可</p><p>OMV安装OMVEXTRAS<br>官方教程  <a href="https://www.openmediavault.cn/read-omvextrasorg.html">https://www.openmediavault.cn/read-omvextrasorg.html</a><br>安装好后，按下图设置</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112165303.png"></p><h1 id="安装Typecho"><a href="#安装Typecho" class="headerlink" title="安装Typecho"></a>安装Typecho</h1><h2 id="在文件管理，找到自己的usb设备，我的是移动2T的移动硬盘，选择挂载。"><a href="#在文件管理，找到自己的usb设备，我的是移动2T的移动硬盘，选择挂载。" class="headerlink" title="在文件管理，找到自己的usb设备，我的是移动2T的移动硬盘，选择挂载。"></a>在文件管理，找到自己的usb设备，我的是移动2T的移动硬盘，选择挂载。</h2><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112170829.png"></p><p>用winscp软件，到2t下面建www文件夹，在www下面建typecho文件夹，在typecho下面建public_html 文件夹  都设置777权限，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112170108.png"><br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112170222.png"></p><h2 id="安装nginx和mysql"><a href="#安装nginx和mysql" class="headerlink" title="安装nginx和mysql"></a>安装nginx和mysql</h2><p>在插件找插件，点安装就可以的，先安装nginx，再安装mysql，安装好后入下图</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112171153.png"></p><h3 id="设置nginx-点击pools，添加typecho"><a href="#设置nginx-点击pools，添加typecho" class="headerlink" title="设置nginx 点击pools，添加typecho"></a>设置nginx 点击pools，添加typecho</h3><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112171656.png"><br>点击服务器，添加后保存<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112171847.png"><br>应用更改后再设置，选择typecho目录，选择公共目录，选择public_html，启用php，php-fpm-pool选择刚刚建立的typecho</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112172404.png"></p><p>Index下面的三个选项都打开</p><p>这里先打乱一些顺序，我发现安装好typecho后，只能打开前台，文件页面和管理后台都出现404，下面就是解决方法<br>下面有个扩展选项，填入下面代码</p><p>if (-f $request_filename/index.html){<br>    rewrite (.<em>) $1/index.html break;<br>}<br>if (-f $request_filename/index.php){<br>    rewrite (.</em>) $1/index.php;<br>}<br>if (!-f $request_filename){<br>    rewrite (.*) /index.php;<br>}</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112173220.png"></p><p>也可以直接在配置 /etc/nginx/sites-available/zzz-omv-nginx 最后面加上面的代码<br>就可以了</p><p>最后在General点击启用，nginx 就配置好了<br>下面配置数据库</p><h3 id="omv安装数据库"><a href="#omv安装数据库" class="headerlink" title="omv安装数据库"></a>omv安装数据库</h3><p><a href="https://www.openmediavault.cn/read-omv-install-mysql.html">https://www.openmediavault.cn/read-omv-install-mysql.html</a></p><p>打开mysql，重设密码。绑定ip改成n1的ip</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112174209.png"></p><p>点击show<br>用户ID：omvadmin<br>密码：刚修改过的<br>登陆后，创建数据库<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112174527.png"><br>官方下载 <a href="http://typecho.org/">http://typecho.org/</a><br>解压后，将文件上传到前面建立都public_html文件夹，就可以安装了。</p><h3 id="mysql自动启动"><a href="#mysql自动启动" class="headerlink" title="mysql自动启动"></a>mysql自动启动</h3><p>安装配置完nginx和mysql后默认mysql是不能自启动的。所以还要配置数据库自启动。用winscp连接OMV系统【默认用户名root密码openmediavault】。连接后打开etc-找到rc.loal,右键点编辑，在exit 0上一行添加service mysqld start保存退出。就可以了</p><h3 id="备份数据库和还原数据库"><a href="#备份数据库和还原数据库" class="headerlink" title="备份数据库和还原数据库"></a>备份数据库和还原数据库</h3><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20200112182628.png"></p><h1 id="顺便推荐一个非常漂亮的主题"><a href="#顺便推荐一个非常漂亮的主题" class="headerlink" title="顺便推荐一个非常漂亮的主题"></a>顺便推荐一个非常漂亮的主题</h1><p><a href="https://zhebk.cn/Web/Akina.html">https://zhebk.cn/Web/Akina.html</a></p><h1 id="下面是相关命令和教程"><a href="#下面是相关命令和教程" class="headerlink" title="下面是相关命令和教程"></a>下面是相关命令和教程</h1><p>omv-firstaid<br>First aid 界面翻译</p><p>configure network interface 配置网络界面</p><p>configure web control panel 配置Web控制面板</p><p>change control panel administrator password 更改控制面板管理员密码</p><p>restore failed login attempt counter 恢复失败登录尝试计数器</p><p>restore configuration backup 恢复配置备份</p><p>check configuration status file 检查配置状态文件</p><p>check RRD database 检查RRD数据库</p><p>clear local upload package repository 清除本地上传包存储库</p><p>clean apt 清除apt</p><p>clear web control panel cache 清除Web控制面板缓存</p><p>submit diagnostic report to administrator 向管理员提交诊断<br>卸载相关<br>apt-get remove 会删除软件包而保留软件的配置文件<br>apt-get purge 会同时清除软件包和软件的配置文件<br>卸载openmediavault命令<br>apt-get purge openmediavault</p><p>armbian-config可视化操作里面有许多快捷的系统设置，<br>比如说基本的时间设置、网络设置，Wi-Fi设置，设置热点、安装桌面和远程、安装热门的第三方软件（诸如nginx Nextcloud、Plex、OpenMediaVault、Pi-hole、Transmission、Docker等热门软件）<br>下面收集了一些omv的相关教程，可以参考<br>omv使用</p><p>OMV安装NextCloud<br><a href="https://www.openmediavault.cn/read-omv-an-zhuang-nextcloud.html">https://www.openmediavault.cn/read-omv-an-zhuang-nextcloud.html</a></p><p>phicomm N1 armbian环境下安装功能丰富的开源NAS系统 OpenMediaVault<br><a href="https://www.right.com.cn/forum/thread-342164-1-1.html">https://www.right.com.cn/forum/thread-342164-1-1.html</a></p><p>N1 OpenMediaVault 使用DLNA+VLC多媒体应用的小白教程<br><a href="https://www.right.com.cn/forum/thread-342841-1-1.html">https://www.right.com.cn/forum/thread-342841-1-1.html</a></p><p>OpenMediaVault(OMV)配置Docker<br><a href="https://www.jianshu.com/p/5b0eacc61527">https://www.jianshu.com/p/5b0eacc61527</a></p><p>OMV安装可道云(kodexplorer)<br><a href="https://www.jianshu.com/p/4731a1ef01d1">https://www.jianshu.com/p/4731a1ef01d1</a></p><p>OMV安装web服务器详细教程<br><a href="https://jingyan.baidu.com/article/0aa223757304e688cd0d6464.html">https://jingyan.baidu.com/article/0aa223757304e688cd0d6464.html</a></p>]]></content>
    
    
    <categories>
      
      <category>斐讯N1</category>
      
      <category>omv</category>
      
      <category>typecho</category>
      
      <category>lnmp</category>
      
      <category>mysql</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斐讯N1</tag>
      
      <tag>omv</tag>
      
      <tag>lnmp</tag>
      
      <tag>typecho</tag>
      
      <tag>mysql</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>斐讯N1 docker安装homeassistant  配置斐讯dc1智能插座</title>
    <link href="/posts/6.html"/>
    <url>/posts/6.html</url>
    
    <content type="html"><![CDATA[<p>斐讯N1 docker安装homeassistant  配置斐讯dc1智能插座</p><p> 默认代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --restart=always --name=<span class="hljs-string">&quot;home-assistant&quot;</span> -e TZ=Asia<span class="hljs-regexp">/Shanghai -v /</span>var<span class="hljs-regexp">/lib/</span>docker<span class="hljs-regexp">/homeassistant:/</span>config -p <span class="hljs-number">8123</span>:<span class="hljs-number">8123</span> -v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime:ro --net=host homeassistant/aarch64-homeassistant:latest<br><br></code></pre></td></tr></table></figure><span id="more"></span><p>homeassistant:latest表示最新版的 用0.88.1顺手了，配置文件也有了，就不想安装最新版本的了。新版也试用过，不太好用<br> 刚开始用的代码是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --restart=always --name=<span class="hljs-string">&quot;home-assistant&quot;</span> -e TZ=Asia<span class="hljs-regexp">/Shanghai -v /</span>var<span class="hljs-regexp">/lib/</span>docker<span class="hljs-regexp">/homeassistant:/</span>config -p <span class="hljs-number">8123</span>:<span class="hljs-number">8123</span> -v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime:ro --net=host homeassistant/aarch64-homeassistant:<span class="hljs-number">0.88</span>.<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p> 没几天发现N1omv不能登陆，查询到内存储存已满，查找到var/lib/docker/homeassistant/config 里面有一个home-assistant_v2.db文件占了2G多，而且会不断的变大，更改 /docker/homeassistant的安装目录到移动硬盘<br> 这个是我的docker的安装目录，/sharedfolders/2t/docker<br> 所以修改后的代码就是把/var/lib/docker更换成/sharedfolders/2t/docker</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --restart=always --name=<span class="hljs-string">&quot;home-assistant&quot;</span> -e TZ=Asia<span class="hljs-regexp">/Shanghai -v /</span>sharedfolders<span class="hljs-regexp">/2t/</span>docker<span class="hljs-regexp">/homeassistant:/</span>config -p <span class="hljs-number">8123</span>:<span class="hljs-number">8123</span> -v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime:ro --net=host homeassistant/aarch64-homeassistant:<span class="hljs-number">0.88</span>.<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p> 下载DCI配网工具<br> 给DC1配置好网络，要在路由里面找到DC1的ip就算完成了</p><p> 下载 20190628 HA Docker - DC1 M1.rar 里面有配置说明的<br> 蓝奏云网盘下载 <a href="https://www.lanzous.com/b987569">https://www.lanzous.com/b987569</a><br> 下载的文件里面有配置说明的，我也简单说下，把custom_components、M1（悟空净化器）、packages上传到/homeassistant根目录，下面内容复制进configuration.yaml底部<br> homeassistant:<br> packages: !include_dir_named packages<br> 斐讯K2老毛子固件路由。高级设置，内部网络，DHCP服务器，自定义配置文件 “hosts”<br> 增加以下两句<br> 192.168.123.24 Smartplugconnect.phicomm.com<br> 192.168.123.24 aircat.phicomm.com<br> 备注：192.168.123.24是我的斐讯N1的ip<br> 修改packages/phicomm_dc1m.yaml<br> ip修改成你在路由器里面看到DC1的ip</p><p> 配置根目录的automations.yaml<br> 我设置了饮水机06.30开 00.30关 打印机18.00开 00.00关，下面是代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">switch_on</span> <span class="hljs-number">06.30</span><br>  <span class="hljs-attr">initial_state:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">time</span><br>    <span class="hljs-attr">at:</span> <span class="hljs-string">&#x27;06:30:00&#x27;</span><br>  <span class="hljs-attr">action:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">service:</span> <span class="hljs-string">switch.turn_on</span> <br>    <span class="hljs-attr">entity_id:</span> <span class="hljs-string">switch.dc1_s1_template</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">switch_off</span> <span class="hljs-number">00.30</span><br>  <span class="hljs-attr">initial_state:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">time</span><br>    <span class="hljs-attr">at:</span> <span class="hljs-string">&#x27;00:30:00&#x27;</span><br>  <span class="hljs-attr">action:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">service:</span> <span class="hljs-string">switch.turn_off</span><br>    <span class="hljs-attr">entity_id:</span> <span class="hljs-string">switch.dc1_s1_template</span><br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">switch_on</span> <span class="hljs-number">18.00</span><br>  <span class="hljs-attr">initial_state:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">time</span><br>    <span class="hljs-attr">at:</span> <span class="hljs-string">&#x27;18:00:00&#x27;</span><br>  <span class="hljs-attr">action:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">service:</span> <span class="hljs-string">switch.turn_on</span><br>    <span class="hljs-attr">entity_id:</span> <span class="hljs-string">switch.dc1_3_s3_template</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">switch_off</span> <span class="hljs-number">00.00</span><br>  <span class="hljs-attr">initial_state:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">time</span><br>    <span class="hljs-attr">at:</span> <span class="hljs-string">&#x27;00:00:00&#x27;</span><br>  <span class="hljs-attr">action:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">service:</span> <span class="hljs-string">switch.turn_off</span><br>    <span class="hljs-attr">entity_id:</span> <span class="hljs-string">switch.dc1_3_s3_template</span><br><br><br></code></pre></td></tr></table></figure><p> 配置过程发现问题解决的的3个方法<br> 1、斐讯DCI拔插头断电，再接电<br> 2、重启homeassistant<br> 3、退出homeassistant账户，重新登陆</p><p> 可以在docker重启homeassistant ，也可以在网页重启，配置好文件后可以按下图更改，0.88.1配置是这样的，新版貌似没有配置检查。<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMTYvNzFxSWZnT2N0WFFFckI1LnBuZw?x-oss-process=image/format,png" alt="dc1配置.png"></p>]]></content>
    
    
    <categories>
      
      <category>斐讯N1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斐讯N1</tag>
      
      <tag>docker</tag>
      
      <tag>homeassistant</tag>
      
      <tag>斐讯DC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 绑定域名添加https的方法2019年9月更新</title>
    <link href="/posts/5.html"/>
    <url>/posts/5.html</url>
    
    <content type="html"><![CDATA[<p>  官方教程<br> <a href="https://help.github.com/en/articles/using-a-custom-domain-with-github-pages">https://help.github.com/en/articles/using-a-custom-domain-with-github-pages</a><br> 打开 <a href="https://github.com/">https://github.com/</a><br> 打开 <a href="https://github.com/waimao8/waimao8.github.io/settings">https://github.com/waimao8/waimao8.github.io/settings</a><br> 绑定域名：163168.xyz</p><span id="more"></span><p> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMTQvT3djYURRVWxMdGQxN0Z2LnBuZw?x-oss-process=image/format,png" alt="1.png"></p><p> 打开你要绑定域名的项目，进入设置页面。并在 Github Pages - Custom domain 这一栏填上你的网址<br> 163168.xyz</p><p> 在source 目录添加一个新文件CNAME，不带任何后缀，这就是全称，里面写的是你的域名 163168.xyz<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMTQveVc1YWRzSE4zUVVEeHdxLnBuZw?x-oss-process=image/format,png" alt="2.png"></p><p> 免费https域名解析<br> <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a><br> 从域名服务商ns到下面两个地址<br> candy.ns.cloudflare.com<br> earl.ns.cloudflare.com<br> 电脑运行cmd ping waimao8.github.io<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMTQvdzFJOHVseG9HZmprc0RpLnBuZw?x-oss-process=image/format,png" alt="4.png"><br> 查询ip位<br> 185.199.108.153<br> 之前ping的是185.199.110.153</p><p> 从cloudflare解析域名 163168.xyz<br> 185.199.110.153<br> 185.199.111.153<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMTQvalpQblh1NGhrSm1NVHkxLnBuZw?x-oss-process=image/format,png" alt="6.png"><br> 等30分钟左右生效<br> 点击 <a href="https://163168.xyz/">https://163168.xyz/</a> 生效就可以访问了</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
      <category>hexo</category>
      
      <category>域名</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域名</tag>
      
      <tag>hexo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome安装Tampermonkey，添加插件的过程</title>
    <link href="/posts/13.html"/>
    <url>/posts/13.html</url>
    
    <content type="html"><![CDATA[<p>chrome安装Tampermonkey，添加插件的过程</p><h1 id="安装谷歌访问助手"><a href="#安装谷歌访问助手" class="headerlink" title="安装谷歌访问助手"></a>安装谷歌访问助手</h1><p>打开google搜索和<a href="https://play.google.com/">https://play.google.com/</a>  的正确方式<br>下载谷歌访问助手<br><a href="https://github.com/haotian-wang/google-access-helper">https://github.com/haotian-wang/google-access-helper</a><br>解压文件后<br>将谷歌访问助手_v2.3.0.crx 重命名为谷歌访问助手_v2.3.0.zip</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213133150.png"><br>打开开发者模式<br>将重命名为谷歌访问助手_v2.3.0.zip拖到浏览器就会自动安装了</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213133526.png"></p><p>点击 <a href="https://google.com/">https://google.com</a> 或者 <a href="https://play.google.com/">https://play.google.com/</a> 就可以用了</p><h1 id="安装Tampermonkey"><a href="#安装Tampermonkey" class="headerlink" title="安装Tampermonkey"></a>安装Tampermonkey</h1><p>点击  <a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a><br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213134125.png"></p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213134218.png"></p><h1 id="安装chrome看视频的vip插件"><a href="#安装chrome看视频的vip插件" class="headerlink" title="安装chrome看视频的vip插件"></a>安装chrome看视频的vip插件</h1><p>点击 <a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a><br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213134429.png"><br>点安装次脚步<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213134506.png"><br>打开视频网站（随便哪一家）<br><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213134811.png"><br>首次使用，随便输入一串数字，点击左边的VIP就可以观看了</p><p><img src="https://cdn.jsdelivr.net/gh/waimao8/image@master/20191213135010.png"></p><p>还有很多的插件都可以自己安装的，这里就不一一介绍了！</p>]]></content>
    
    
    <categories>
      
      <category>电脑软件</category>
      
      <category>chrome</category>
      
      <category>Tampermonkey</category>
      
      <category>cheome插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cheome插件</tag>
      
      <tag>电脑软件</tag>
      
      <tag>chrome</tag>
      
      <tag>Tampermonkey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客备份迁移教程</title>
    <link href="/posts/3.html"/>
    <url>/posts/3.html</url>
    
    <content type="html"><![CDATA[<h1 id="hexo备份"><a href="#hexo备份" class="headerlink" title="hexo备份"></a>hexo备份</h1><h2 id="新建repository"><a href="#新建repository" class="headerlink" title="新建repository"></a>新建repository</h2><p>在Github下创建一个新的repository，取名为myblog。(与本地的Hexo源码文件夹同名即可)<br>创建的时候最好为空，不要勾选创建README.md。</p><span id="more"></span><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>进入本地的Hexo文件夹(D:\hexo\blog\myblog)，在这个地方使用git Bash here执行以下命令创建仓库</p><h2 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建.gitignore文件</h2><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"><span class="hljs-keyword">touch</span> .gitignore<br></code></pre></td></tr></table></figure><p>参考我的 .gitignore：（下面的文件不备份）<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p><h2 id="提交Hexo源码"><a href="#提交Hexo源码" class="headerlink" title="提交Hexo源码"></a>提交Hexo源码</h2><p>git add .<br>git commit -m “添加hexo源码文件作为备份”</p><h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><p>git remote rm origin</p><h2 id="添加远程-Git-仓库"><a href="#添加远程-Git-仓库" class="headerlink" title="添加远程 Git 仓库"></a>添加远程 Git 仓库</h2><p>git remote add origin <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:waimao8/myblog.git</p><h2 id="远程仓库合并到本地"><a href="#远程仓库合并到本地" class="headerlink" title="远程仓库合并到本地"></a>远程仓库合并到本地</h2><p>git pull –rebase origin master</p><h2 id="更新远程仓库"><a href="#更新远程仓库" class="headerlink" title="更新远程仓库"></a>更新远程仓库</h2><p>git push -u origin master</p><h1 id="hexo备份还原"><a href="#hexo备份还原" class="headerlink" title="hexo备份还原"></a>hexo备份还原</h1><p>在任何一台电脑上，只需要git remote add origin <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>:waimao8/myblog.git,即可完成将Hexo源文件复制到本地</p><p>在本地编写完博客时，顺次执行实现三步骤，即可完成Hexo博客源文件更新同步</p><h2 id="提交Hexo源码-1"><a href="#提交Hexo源码-1" class="headerlink" title="提交Hexo源码"></a>提交Hexo源码</h2><p>git add .<br>git commit -m “添加hexo源码文件作为备份”</p><h2 id="远程仓库合并到本地-1"><a href="#远程仓库合并到本地-1" class="headerlink" title="远程仓库合并到本地"></a>远程仓库合并到本地</h2><p>git pull –rebase origin master</p><h2 id="更新远程仓库-1"><a href="#更新远程仓库-1" class="headerlink" title="更新远程仓库"></a>更新远程仓库</h2><p>git push -u origin master</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>hexo备份还原</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github搭建hexo博客和绑定域名的详细过程</title>
    <link href="/posts/2.html"/>
    <url>/posts/2.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、https-github-com-先注册账号-比如我的是-waimao8"><a href="#1、https-github-com-先注册账号-比如我的是-waimao8" class="headerlink" title="1、https://github.com/ 先注册账号 比如我的是 waimao8"></a><a href=""></a>1、<a href="https://github.com/">https://github.com/</a> 先注册账号 比如我的是 waimao8</h2><h2 id="2、New-repository-waimao8-github-io"><a href="#2、New-repository-waimao8-github-io" class="headerlink" title="2、New repository waimao8.github.io"></a><a href=""></a>2、New repository waimao8.github.io</h2><h2 id="3、下载git-https-git-scm-com-downloads-默认安装-安装好后，用git-–version-来查看一下版本"><a href="#3、下载git-https-git-scm-com-downloads-默认安装-安装好后，用git-–version-来查看一下版本" class="headerlink" title="3、下载git https://git-scm.com/downloads 默认安装 安装好后，用git –version 来查看一下版本"></a><a href=""></a>3、下载git <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 默认安装 安装好后，用git –version 来查看一下版本</h2><h2 id="4、下载-https-nodejs-org-en-download-选LTS-默认安装-，安装完后，打开命令行"><a href="#4、下载-https-nodejs-org-en-download-选LTS-默认安装-，安装完后，打开命令行" class="headerlink" title="4、下载 https://nodejs.org/en/download/ 选LTS 默认安装 ，安装完后，打开命令行"></a><a href=""></a>4、下载 <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 选LTS 默认安装 ，安装完后，打开命令行</h2><span id="more"></span><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br><br></code></pre></td></tr></table></figure><h2 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a><a href=""></a>5、安装hexo</h2><p> 先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）<br> 输入命令  <code>npm install -g hexo-cli</code><br> 用 hexo -v 查看一下版本<br> 初始化一下hexo<br> hexo init myblog 或者hexo init<br> cd /D/hexo/blog/myblog (每个人的安装目录都不一样，可参考我的</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br><br></code></pre></td></tr></table></figure><p> 在浏览器输入localhost:4000就可以看到你生成的博客了</p><h2 id="6、生成SSH添加到GitHub"><a href="#6、生成SSH添加到GitHub" class="headerlink" title="6、生成SSH添加到GitHub"></a><a href=""></a>6、生成SSH添加到GitHub</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br><br></code></pre></td></tr></table></figure><p> 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱<br> 检查一下你有没有输对</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br><br></code></pre></td></tr></table></figure><p> 然后创建SSH,一路回车<br> ssh-keygen -t rsa -C “youremail”<br> 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹<br> 一般在这个位置c/Users/Administrator/.ssh/<br> GitHub的最右上角setting中，找到SSH keys的设置选项，点击New SSH key<br> 把你的id_rsa.pub里面的信息复制进去<br> 在gitbash中，查看是否成功</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br><br></code></pre></td></tr></table></figure><p> 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi liuxianan! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br><br></code></pre></td></tr></table></figure><p> 看到这个信息说明SSH已配置成功！</p><p> 此时你还需要配置：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;liuxianan&quot;</span><span class="hljs-comment">// 你的github用户名，非昵称</span><br><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span>  <span class="hljs-string">&quot;xxx@qq.com&quot;</span><span class="hljs-comment">// 填写你的github注册邮箱</span><br><br></code></pre></td></tr></table></figure><h2 id="7、将hexo部署到GitHub"><a href="#7、将hexo部署到GitHub" class="headerlink" title="7、将hexo部署到GitHub"></a><a href=""></a>7、将hexo部署到GitHub</h2><p> 打开站点配置文件 _config.yml，翻到最后，修改为<br> YourgithubName就是你的GitHub账户</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span><br>  或者 <br><span class="hljs-symbol">  repo:</span>git@github.com:waimao8/waimao8.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br><br></code></pre></td></tr></table></figure><p> 安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br><br></code></pre></td></tr></table></figure><p> 然后</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br><br></code></pre></td></tr></table></figure><p> hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br> hexo deploy 部署文章，可以用hexo d缩写</p><p> 注意deploy时可能要你输入username和password。</p><p> 得到下图就说明部署成功了，过一会儿就可以在 <a href="http://waimao8.github.io/">http://waimao8.github.io </a>这个网站看到你的博客了！！</p><h2 id="8、设置个人域名"><a href="#8、设置个人域名" class="headerlink" title="8、设置个人域名"></a><a href=""></a>8、设置个人域名</h2><p> 打开cmd<br> ping waimao8.github.io<br> 得到ip：185.199.110.153<br> 添加域名解析，A到185.199.110.153<br> ping下哪个ip的访问速度快，就A到哪里ip<br> 点击添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址 比如我的 waimao8.github.io<br> Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名<br> 新域名配置完成，可以访问了</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo安装后的使用教程</title>
    <link href="/posts/1.html"/>
    <url>/posts/1.html</url>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="安装主题（next）"><a href="#安装主题（next）" class="headerlink" title="安装主题（next）"></a>安装主题（next）</h1><p>git clone <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> themes/next</p><p> 下载主题解压后放到themes目录<br> 编辑主目录的_config.yml 查找language 设置 language: zh-CN  </p><span id="more"></span><p> 搜索Schemes<br> 切换到 scheme: Gemini<br> 搜索menu找到如下配置项，将about、tags、categories前的#号去掉</p><p>更新hexo或者主题可以复制 备份好的source  文件夹替换，新安装的博客可以按照下面教程重新安装</p><h1 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h1><p> 1、创建“分类”选项<br> 1.1 生成“分类”页并添加tpye属性<br> 打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br><br></code></pre></td></tr></table></figure><p> 成功后会提示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">INFO  Created: ~<span class="hljs-regexp">/Documents/</span>blog<span class="hljs-regexp">/source/</span>categories/index.md<br><br></code></pre></td></tr></table></figure><p> 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-04-07 0:30:00</span><br><span class="hljs-meta">---</span><br><br></code></pre></td></tr></table></figure><p> 添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-04-07 0:30:00</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br><br></code></pre></td></tr></table></figure><p> 保存并关闭文件。</p><h1 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h1><p> 打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">jQuery对表单的操作及更多应用</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-04-07 0:31:22</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">web前端</span><br><span class="hljs-meta">---</span><br><br></code></pre></td></tr></table></figure><p> 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。  </p><h1 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h1><p> 生成“标签”页并添加tpye属性<br> 打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br><br></code></pre></td></tr></table></figure><p> 找到 source/tags/index.md<br> 添加type: “tags”到内容中，添加后是这样的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-04-07 0:33:55</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-meta">---</span><br><br></code></pre></td></tr></table></figure><p> 保存并关闭文件。  </p><h1 id="给文章添加标签和分类"><a href="#给文章添加标签和分类" class="headerlink" title="给文章添加标签和分类"></a>给文章添加标签和分类</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: title #文章標題<br>date: 2019<span class="hljs-string">-04</span><span class="hljs-string">-07</span> 00:43:12 #文章生成時間<br>categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略<br><span class="hljs-keyword">tags:</span> #文章標籤 可以省略<br>     - 标签1<br>     - 标签2<br> description: #你對本頁的描述 可以省略<br><br></code></pre></td></tr></table></figure><h1 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h1><p> 编辑主题的_config.yml，查找menu，去掉 tags categories about 前面的#号就可以了  </p><h1 id="显示摘要-阅读全文"><a href="#显示摘要-阅读全文" class="headerlink" title="显示摘要 阅读全文"></a>显示摘要 阅读全文</h1><p>在文章下面添加，建议在3到5行处添加<br>  &lt; !–more–&gt;</p><h1 id="添加版权"><a href="#添加版权" class="headerlink" title="添加版权"></a>添加版权</h1><p>搜索 creative_commons<br>sidebar: false 改成  sidebar: true<br>post: false 改成 post: true</p><h1 id="文章Url固定链接（修改博客根目录的-config-yml）"><a href="#文章Url固定链接（修改博客根目录的-config-yml）" class="headerlink" title="文章Url固定链接（修改博客根目录的_config.yml）"></a>文章Url固定链接（修改博客根目录的_config.yml）</h1><p>查找 permalink: :year/:month/:day/:title/<br>替换成<br>permalink: archives/:abbrlink.html<br>写文章加上 abbrlink: 1（数字越大的，就是越新的文章）</p><h1 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h1><p><a href="https://github.com/netcan/hexo-generator-index-pin-top">支持置顶的仓库</a></p><p>可以直接用以下命令安装</p><p>$ npm uninstall hexo-generator-index –save<br>$ npm install hexo-generator-index-pin-top –save<br>然后在需要置顶的文章的Front-matter中加上top: true即可。</p><p>设置置顶标志<br>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件<br>查找</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;post-meta&quot;</span>&gt;  <br></code></pre></td></tr></table></figure><p>下面添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> post.top %&#125;</span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">7D26CD</span>&gt;</span>置顶<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure><p>需要置顶文章需要添加    top: true</p><h1 id="添加不蒜子访问统计"><a href="#添加不蒜子访问统计" class="headerlink" title="添加不蒜子访问统计"></a>添加不蒜子访问统计</h1><p> 是否开启访问量统计功能(不蒜子)<br>busuanzi:<br> enable: true<br> 修改next主题的模板文件<br>需要修改的模板文件是theme/next/layout/_partials/footer.swig<br>在最后面添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> theme.footer.counter %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>总访客<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure><h1 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h1><p>Github大礼包：gitment， gitalk（推荐），gitter（推荐）; 三个都支持Markdown；基于leancloud的无后端评论系统：Valine（推荐，支持Markdown）<br>本站使用<br>Valine+Leancloud 国际版 <a href="https://console.leancloud.app/">https://console.leancloud.app</a><br>在存储-&gt;结构化数据创建一个class并命名为comment。<br>在设置-&gt;应用Keys可以看到自动生成的AppID和AppKey,填到下面对应的位置就可以了</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">valine:</span><br><span class="hljs-symbol">  enable:</span> ture<br><span class="hljs-symbol">  appid:</span> xxxxxxx<br><span class="hljs-symbol">  appkey:</span> xxxxxx<br><br></code></pre></td></tr></table></figure><h1 id="添加阅读人数（真实人数）"><a href="#添加阅读人数（真实人数）" class="headerlink" title="添加阅读人数（真实人数）"></a>添加阅读人数（真实人数）</h1><p>id和key 也可以用上面Leancloud 国际版 的AppID和AppKey,</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">xxxxx</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">xxxxxx</span><br><br></code></pre></td></tr></table></figure><h1 id="添加阅读人数之不蒜子（虚高人数）"><a href="#添加阅读人数之不蒜子（虚高人数）" class="headerlink" title="添加阅读人数之不蒜子（虚高人数）"></a>添加阅读人数之不蒜子（虚高人数）</h1><p>打开不蒜子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">busuanzi_count:</span><br><span class="hljs-symbol">  enable:</span> ture<br>  <br></code></pre></td></tr></table></figure><p>打开 next\layout_partials  找到footer.swig文件，在最下面添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> theme.footer.counter %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>总访客<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>网站</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
